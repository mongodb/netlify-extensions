{
    "url": "http://mongodb.com/docs/compass/upcoming",
    "includeInGlobalSearch": false,
    "documents": [
        {
            "slug": "troubleshooting",
            "title": "Troubleshooting",
            "headings": [],
            "paragraphs": "This section provides advice for troubleshooting problems with\n MongoDB Compass . Retrieve  MongoDB Compass  logs to diagnose errors. Resolve issues with connecting  MongoDB Compass  to the MongoDB server.",
            "code": [],
            "preview": "This section provides advice for troubleshooting problems with\nMongoDB Compass.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "faq",
            "title": "FAQ",
            "headings": [
                "What is the Compass Isolated Edition?",
                "What is the performance impact of running this tool?",
                "How does Compass handle confidential data?",
                "Does Compass Maintain Logs?",
                "Why am I seeing a warning about a non-genuine MongoDB server?",
                "What happens to long running queries?",
                "Slow Sampling",
                "Slow Schema Analysis",
                "Why are some features of MongoDB Compass not working?",
                "How do I view and modify my Privacy Settings?",
                "How do I enable geographic visualizations?"
            ],
            "paragraphs": "Compass Isolated Edition  restricts network\nrequests to only the MongoDB server chosen on the\n Connect  screen. All other\noutbound connections are not permitted in this edition, meaning no\nadditional firewall configuration is required when running Compass\nIsolated Edition. Testing has shown that  MongoDB Compass  has minimal impact in prototype\ndeployments, though additional performance testing and monitoring is in\nprogress. You should only execute queries that are indexed appropriately in the\ndatabase to avoid scanning the entire collection. MongoDB Compass  stores and retrieves sensitive data such as passwords\nusing a credentials API specific to the operating system running\n Compass . The credentials API securely handles sensitive\ninformation by encrypting and protecting access to your data. MongoDB Compass  stores the following data using the credentials API: MongoDB Compass  utilizes a node.js native add-on,  Keytar , to communicate with and store\ndata in the operating system's credentials API. For more information on\nhow Keytar operates and the specific APIs it accesses, refer to the\n Keytar Github documentation . MongoDB server passwords, SSH passwords for tunneling, TLS (Transport Layer Security) / SSL (Secure Sockets Layer)  passphrases As part of normal operation,  MongoDB Compass  maintains a running log of\nevents.  Compass  logs provide a history of operations and can\nhelp diagnose errors. For more information on  Compass  logs,\nincluding their format and location, see  Retrieve Compass Logs . Starting in  MongoDB Compass  1.19,  Compass  displays a\nwarning message when connected to non-genuine MongoDB instances as\nthese instances may behave differently from the official MongoDB\ninstances; e.g. missing or incomplete features, different feature\nbehaviors, etc. As a precaution, Compass aborts long running queries to prevent\nexcessive querying on your database. All queries that Compass sends to your MongoDB instance have a timeout\nflag set which automatically aborts a request if it takes longer than\nthe specified timeout. This timeout is currently set to 10 seconds. If\n sampling  on the database takes longer, Compass will\nnotify you about the timeout and give you the options of (a) retrying\nwith a longer timeout (60 seconds) or (b) running a different query. It is recommended that you only increase the sampling timeout if you\nare not connected to a production instance, as this may negatively\naffect the performance and response time of your database. Sampling time may be affected by a number of factors, like load on\nthe server, number of documents and existence of a suitable index\nfor your query. If the database returns documents faster than the specified timeout (10\nor 60 seconds), but the schema analysis of the documents takes longer\nthan expected (due to complex, large documents), Compass gives you the\noption to abort the analysis step and show the partial results. If you can connect to your MongoDB instance using  MongoDB Compass  but some\nfeatures do not work as expected, your system firewall may be blocking\nnetwork requests required by  MongoDB Compass .  MongoDB Compass  must connect to\nexternal services to enable features such as: To fix this issue, configure your system firewall to allow incoming\nconnections for  MongoDB Compass . Ensure ports  80  and  443  are open\nbetween  MongoDB Compass  and the host for the MongoDB deployment to which\nCompass connects. Third party mapping services Intercom Bugsnag for error reporting Compass Isolated Edition  restricts network\nrequests to only the MongoDB server chosen on the\n Connect  screen. All other\noutbound connections are not permitted in this edition, meaning no\nadditional firewall configuration is required when running Compass\nIsolated Edition. To view and modify your  MongoDB Compass  privacy settings, from the top-level\nmenu click  Help , then  Privacy Settings . The privacy settings dialog allows you to toggle various\n MongoDB Compass  settings such as enabling crash reports and automatic updates.\nSee the following screenshot for all available privacy settings options: Crash reports and automatic updates are not available in\n Compass Isolated Edition . You can enable geographic visualizations in  MongoDB Compass  in your\nprivacy settings. When  Enable Geographic Visualizations  is\nselected,  MongoDB Compass  is allowed to make requests to a third-party\nmapping service. Third party mapping services are not available in\n Compass Isolated Edition .",
            "code": [],
            "preview": "Testing has shown that MongoDB Compass has minimal impact in prototype\ndeployments, though additional performance testing and monitoring is in\nprogress.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "validation",
            "title": "Set Validation Rules for Your Schema",
            "headings": [
                "Validation Tab",
                "Validation Rules",
                "JSON Schema Validation",
                "Validation using Query Operators",
                "Validation Actions and Levels",
                "Limitations"
            ],
            "paragraphs": "The  Validation  tab allows you to manage\n schema validation rules \nfor a collection. Schema validation ensures that all documents in a\ncollection follow a defined set of rules, such as conforming to a\nspecific shape or only allowing a specified range of values in fields. Updated in version 1.18. The validation editor supports  JSON Schema validation , and validation with query\nexpressions using  query operators . As you edit your validation,\n Compass  updates in real-time to display a document from your\ncollection that passes the validation and a document that fails. To specify JSON Schema validation, use the\n $jsonSchema \noperator. The  $jsonSchema \noperator supports various keywords to specify validation rules. For\nexample: Consider the following example validation: This validation specifies: For all available  $jsonSchema  keywords, refer to the\n $jsonSchema  page in\nthe MongoDB manual. The  required  array defines required fields in your document. fields. The list of\n required \nfields. The  bsonType  for\nall fields. The  minimum \nand  maximum \nvalues for the  year  field. The acceptable values for the   major  field, using\n enum . The  minimum \nvalue for the  gpa  field. You can also specify validation using\n query operators , with the\nexception of the following query operators:  $near ,\n $nearSphere ,  $text , and  $where . Using this validation,  one  of the following must be true: The  phone  field must be BSON type string, The  email  field must match the\n regex \n /@mongodb\\.com$/ , or The  status  field must be either  Unknown  or  Incomplete . At the top, specify a  Validation Action  and\n Validation Level : For details on validation actions and levels, see\n Specify Validation Rules  in the MongoDB\nmanual. The validation action determines whether to  warn  but accept\ninvalid documents, or  error  and reject invalid documents. The validation level determines how strictly MongoDB applies\nvalidation rules to existing documents. Strict  validation applies your rules to all document inserts\nand updates. Moderate  validation only applies your rules to new documents\nand existing valid documents. Existing invalid documents are not\naffected. Schema Validation The  Validation  tab is not available if you are connected to\na  Data Lake . In  MongoDB Compass Readonly Edition , you can\nonly view validation rules. Creating and editing validation rules\nis not permitted.",
            "code": [
                {
                    "lang": "json",
                    "value": "{\n   $jsonSchema: {\n      required: ['customer'], // the customer field is required\n      properties: {\n      purchaseMethod: {\n         enum: ['In Store','Online'],\n         description: \"can only be either 'In Store' or 'Online'\"\n      }\n      }\n   }\n}"
                },
                {
                    "lang": "json",
                    "value": "{\n   $jsonSchema: {\n      bsonType: \"object\",\n      required: [ \"name\", \"year\", \"major\", \"gpa\", \"address.city\", \"address.street\" ],\n      properties: {\n         name: {\n            bsonType: \"string\",\n            description: \"must be a string\"\n         },\n         year: {\n            bsonType: \"int\",\n            minimum: 2017,\n            maximum: 3017,\n            exclusiveMaximum: false,\n            description: \"must be an integer in [ 2017, 3017 ]\"\n         },\n         major: {\n            bsonType: \"string\",\n            enum: [ \"Math\", \"English\", \"Computer Science\", \"History\", null ],\n            description: \"can only be one of the enum values\"\n         },\n         gpa: {\n            bsonType: [ \"double\" ],\n            minimum: 0,\n            description: \"must be a double\"\n         }\n      }\n   }\n}"
                },
                {
                    "lang": "json",
                    "value": "{\n   $or: [\n      { phone: { $type: \"string\" } },\n      { email: { $regex: /@mongodb\\.com$/ } },\n      { status: { $in: [ \"Unknown\", \"Incomplete\" ] } }\n   ]\n}"
                }
            ],
            "preview": "The Validation tab allows you to manage\nschema validation rules\nfor a collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "instance",
            "title": "Compass Home",
            "headings": [
                "Databases Tab",
                "Performance Tab"
            ],
            "paragraphs": "The Compass Home screen provides details regarding the\nMongoDB instance to which Compass is connected, including: Once connected to a MongoDB instance, you can reach the Compass\nHome screen by clicking the cluster name in the upper left\ncorner. The connection name if the connection is a favorite connection,\nor \"My Cluster\" otherwise. The deployment type (standalone, replica set, sharded cluster). If\nthe deployment is a replica set and the replica set name is specified\nin the connection window, the number of replica set members will also\nbe displayed. The hostname and port, as well as the version of MongoDB. A list of the instance's  databases . Performance statistics , including memory\nusage, operation counts, and slowest operations. The  Databases  tab of the Home screen shows a list of all\nthe databases on the current connection, with each one's storage size,\nnumber of collections, and number of indexes. For more information\nabout the  Databases  tab and instructions on viewing\na database, see  Databases . The  Performance  tab provides real-time server\nperformance statistics and graphs, showing insights such as: For more information about the  Performance  tab, see\n Performance . Which database collections receive the most operations Which operations take the longest to execute Memory utilization",
            "code": [],
            "preview": "The Compass Home screen provides details regarding the\nMongoDB instance to which Compass is connected, including:",
            "tags": null,
            "facets": null
        },
        {
            "slug": "dark-mode",
            "title": "Enable Dark Mode",
            "headings": [],
            "paragraphs": "You can configure  MongoDB Compass  to use a dark theme. To choose your theme,\nmodify the  Theme  setting. On macOS the  Theme  setting is in the  MongoDB\nCompass  system menu: On Windows and Linux, the  Theme  setting is in the\n View  menu:",
            "code": [],
            "preview": "You can configure MongoDB Compass to use a dark theme. To choose your theme,\nmodify the Theme setting.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "install",
            "title": "Download and Install Compass",
            "headings": [
                "Software Requirements",
                "Software Requirements",
                "M1 Support",
                "Software Requirements",
                "Software Requirements",
                "Download Compass",
                "Download Compass",
                "Download and Install Compass",
                "Install Compass"
            ],
            "paragraphs": "You can connect to your  MongoDB Atlas \ndeployment with  MongoDB Compass . MongoDB Atlas is the fully managed service for\nMongoDB deployments in the cloud. To download and install  MongoDB Compass , select your operating system: MongoDB Compass  doesn't support virtual desktop environments. Compass  requires: 64-bit version of Microsoft Windows 7 or later. MongoDB 3.6 or later. Microsoft .NET Framework version 4.5 or later . The  Compass  installer prompts you to install the\nminimum required version of the .NET framework if it is not\nalready installed on your system. Starting the installation as an administrator if you are running a silent\ninstallation using Microsoft PowerShell or installing on\nAzure Virtual Desktop Infrastructure (VDI). Compass  requires: Compass  supports x64 and ARM64 architectures. 64-bit version of macOS 10.12 or later. MongoDB 3.6 or later. MongoDB Compass  for macOS can run on M1 platforms that have Rosetta\nor Rosetta 2 installed. If you run macOS Big Sur or a more recent operating system,\nRosetta (2) is pre-installed and does not require manual\ninstallation. If you run an operating system prior to macOS Big Sur, you\nmust manually  install Rosetta . Rosetta is not a MongoDB product. Rosetta is developed and\nmaintained by Apple Inc. Select the appropriate tab based on your Linux distribution and\ndesired package from the tabs below: To install the  .deb  package on Ubuntu and Debian,\nclick the  .deb  tab. To install the  .rpm  package on\n RHEL (Red Hat Enterprise Linux) , click the  .rpm \ntab. Compass  requires: 64-bit version of Ubuntu 14.04 or later. MongoDB 3.6 or later. Compass  requires: 64-bit version of RHEL 7+ or later. MongoDB 3.6 or later. To download  Compass , you can use your preferred web browser. Open the  downloads page . Select the installer you prefer. The  MongoDB Compass  installer is\navailable as a  .exe  or  .msi  package or a  .zip \narchive. Download the latest version of  MongoDB Compass  for\nWindows. To download  Compass , you can use your preferred web browser. Open the  downloads page . Download the latest version of  MongoDB Compass  for\nmacOS. The  MongoDB Compass  installer is a  .dmg  disk\nimage. To download  Compass  on Linux systems, use  wget . Alternatively, you can download  Compass  from the\nMongoDB  downloads page . Download  MongoDB Compass Install  MongoDB Compass Start  MongoDB Compass Download  MongoDB Compass Install  MongoDB Compass Start  MongoDB Compass Double-click the installer file. Follow the prompts to install  Compass . You can\nselect the destination of the  Compass  installation. Once installed,  Compass  launches and prompts you to\nconfigure privacy settings and specify update preferences. Once you have downloaded  Compass , double-click on\nthe  .dmg  file to open the disk image within the macOS\nFinder. Drag the  MongoDB Compass  application to your\n Applications  folder. Eject the disk image. From the  Applications  folder, double-click on\nthe  Compass  icon to start the application. When you open  MongoDB Compass  for the first time, you may receive\na notice stating\nthat it is an application downloaded from the internet, requiring you\nto confirm you want to open it. Click  Open  to continue\nand launch  Compass . Depending on your system's security settings, you may have\nto modify your system settings to grant  Compass \npermissions to run. You may be prompted to enter your\nsystem password before launching  Compass . Update MongoDB Compass Capabilities of  Compass  Editions",
            "code": [
                {
                    "lang": "shell",
                    "value": "wget https://downloads.mongodb.com/compass/mongodb-compass_1.34.1_amd64.deb"
                },
                {
                    "lang": "shell",
                    "value": "sudo dpkg -i mongodb-compass_1.34.1_amd64.deb"
                },
                {
                    "lang": "sh",
                    "value": "mongodb-compass"
                },
                {
                    "lang": "shell",
                    "value": "wget https://downloads.mongodb.com/compass/mongodb-compass-1.34.1.x86_64.rpm"
                },
                {
                    "lang": "shell",
                    "value": "sudo yum install mongodb-compass-1.34.1.x86_64.rpm"
                },
                {
                    "lang": "sh",
                    "value": "mongodb-compass"
                }
            ],
            "preview": "You can connect to your MongoDB Atlas\ndeployment with MongoDB Compass. MongoDB Atlas is the fully managed service for\nMongoDB deployments in the cloud.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "indexes",
            "title": "Manage Indexes",
            "headings": [
                "Indexes Tab",
                "Create an Index",
                "Click the Create Index button.",
                "Optional. Enter the index name.",
                "Add fields to index.",
                "Optional. Specify the index options.",
                "Click Create Index.",
                "Wildcard Indexes",
                "Drop an Index",
                "Click the trash can icon for the index to drop.",
                "Confirm the index to delete.",
                "Click Drop to drop the index.",
                "Limitations"
            ],
            "paragraphs": "Indexes are special data structures that improve query performance.\nIndexes store a portion of a collection's data in an easy-to-traverse\nform. The index stores the value of a specific field or set of fields,\nordered by the value of the field. To improve query performance, build indexes on fields that appear often\nin queries and for all operations that\n sort by a field . To learn more about indexes, see  Indexes . Queries on an indexed field can use the index to limit the number of\ndocuments that must be scanned to find matching documents. Sort operations on an indexed field can return documents pre-sorted\nby the index. Indexes have some negative performance impact on write operations.\nFor collections with high write-to-read ratio, indexes are expensive\nsince each insert must also update any indexes. For a detailed list\nof considerations for indexes, see\n Operational Considerations for Indexes . The  Indexes  tab lists the existing indexes for a collection. To access the  Indexes  tab for a collection, click on the\ncollection on the left hand pane and select the  Indexes  tab. For each index, Compass displays the following information: Name and Definition The name of the index and keys. Type Regular, text, geospatial or hashed index. Size How large the index is. Usage Number of times the index has been used since the time the index\nwas created or the last server restart. Properties Any special properties (such as uniqueness, partial) of the\nindex. To create an index on a collection via Compass, the collection must\ncontain documents. From the  Indexes  tab, click the\n Create Index  button to bring up the\n Create Index  dialog. In the dialog, enter the name of the index to create, or leave blank\nto have MongoDB create a default name for the index. Specify an index key. To specify an existing document field as an index key, select\nthe field from the dropdown list. To specify a field which does not exist in any document as an\nindex key, enter the field name in the input box. To create a  compound index ,\nclick  Add Another Field . Use the dropdown to the right of each field name to specify the\nindex type ( ascending ,  descending , or\n 2dsphere ). To learn how to specify a wildcard index, see\n Wildcard Indexes . Compass  supports the following index options: Option Description More Information Build index in the background the index build operation. Background Construction Create unique index Ensure that the indexed fields do not store duplicate values. Unique Indexes Create a  TTL (Time to Live)  index Delete documents automatically after a specified number of\nseconds since the indexed field value. TTL Indexes Partial filter expression Index only the documents which match the specified filter\nexpression. The following partial filter expression only indexes\ndocuments where the  timezone  field exists: Partial Indexes Use custom collation Create a custom collation for the index using the options\nprovided in  Compass . Collation Document Wildcard projection ( New in MongoDB 4.2 ) Support unknown or arbitrary fields which match the specified\nprojection in the index. To use a wildcard projection, set\nyour index field name to   $** . This directs\n Compass  to use all fields in the document (excluding\n _id ). Consider the following wildcard projection document: If your index field name is  $** , your index only\nincludes the values of the fields in that projection. Wildcard Indexes You can create  wildcard indexes  to\nsupport queries against unknown or arbitrary fields. To create a\nwildcard index in  Compass , manually type the wildcard index\nfield ( <field>.$** ) into the  Select a field name \ninput. Consider a collection where documents contain a  userMetadata \nobject. The fields within the  userMetadata  object may vary\nbetween documents. You can create a wildcard index on  userMetadata  to account for\nall potential fields within the object. Type the following into\nthe  Select a field name  input: Specify a type ( ascending  or  descending ) for your wildcard\nindex, then click  Create Index . Compass  shows the type of your new index as\n Wildcard . From the  Indexes  tab, to delete an index,\nclick on the trash can icon for that index. A confirmation\ndialog appears. In the dialog, enter the name of the index to delete. Creating and dropping indexes is not permitted in  MongoDB Compass Readonly Edition . The  Indexes  tab is not available if you are connected\nto a  Data Lake .",
            "code": [
                {
                    "lang": "js",
                    "value": "{ \"timezone\": { \"$exists\": true } }"
                },
                {
                    "lang": "javascript",
                    "value": "{\n  \"product_attributes.elements\" : 1,\n  \"product_attributes.resistance\" : 1\n}"
                },
                {
                    "lang": "javascript",
                    "value": "userMetadata.$**"
                }
            ],
            "preview": "Indexes are special data structures that improve query performance.\nIndexes store a portion of a collection's data in an easy-to-traverse\nform. The index stores the value of a specific field or set of fields,\nordered by the value of the field.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect",
            "title": "Connect to MongoDB",
            "headings": [
                "Considerations",
                "Connect",
                "Paste Connection String",
                "Paste your connection string.",
                "Connect.",
                "Advanced Connection Options"
            ],
            "paragraphs": "This page outlines how to use  MongoDB Compass  to connect to a\nMongoDB host. You can connect to a standalone, replica set,\nor sharded cluster host. If you need to install  Compass , see\n Download and Install Compass  for instructions. If you need to create a MongoDB host, consider using\n MongoDB Atlas .\nAtlas is a cloud-hosted database-as-a-service which requires no\ninstallation, offers a free tier to get started, and provides a\ncopyable URI to easily connect  Compass  to your deployment. When connecting  Compass  to a replica set, it is not\nrecommended to connect directly to an individual replica\nset member. If the member to which you are connected switches from a\n primary  member to a\n secondary  or vice versa as\nthe result of an election,  Compass  may either forcibly close\nthe connection or display stale data. Instead, to connect to a replica set, use either the replica set\n SRV record  or  Replica Set Name  when\nfilling in your connection information. Starting in  MongoDB Compass  1.19,  Compass  displays a\nwarning message when connected to non-genuine MongoDB instances as\nthese instances may behave differently from the official MongoDB\ninstances; e.g. missing or incomplete features, different feature\nbehaviors, etc. When you open  Compass , an initial connection dialog appears: You can connect your deployments by either: Providing your connection string. Specifying  Advanced Connection Options .\nAdvanced connection options allow you to specify authentication,\nTLS/SSL, and SSH connection options. To learn more, see\n Advanced Connection Options . When you provide a connection string,  Compass  supports\nmost  Connection String Options \nsupported by MongoDB. By default,  Compass 's default\n socketTimeoutMS \nvalue is 60000, or 60 seconds. If you are frequently experiencing\ntimeouts in  Compass , consider setting this option to a\nhigher value in your connection string. For a complete list of the connection string options that\n Compass  supports, see the\n Compass Connection README \non GitHub. If you have the connection string for your deployment available, you\ncan paste the string directly into the dialog box. You can use either\nthe  Standard Connection String Format \nor the  DNS Seedlist Connection Format . To obtain the connection string for an  Atlas  cluster: Navigate to your  Atlas   Clusters  view. Click  Connect  for your desired cluster. Click  Connect with MongoDB Compass . Copy the provided connection string. To learn how to format the connection string for a deployment\nwhich is not hosted on  Atlas , see\n Connection String URI Format . Click the  Connect  button to navigate to the\n Compass   Home Page . Once you are connected to your MongoDB deployment, you may\nrequire specific  user roles \nto access various  Compass  features. For more information\non the required roles for  Compass  features, see\n Required Access . The Advanced Connection Options provide additonal forms of connecting\n Compass  deployments. Learn how to select a Connection String Scheme for your deployment. Learn how to connect deployments that require authentication. Learn how to connect deployments using TLS/SSL. Learn how to connect deployments using an SSH tunnel. Learn how to connect deployments using In-Use Encryption. Learn about additional advanced connection options for your deployments. To learn how to disconnect your deployment, see  Disconnect from MongoDB",
            "code": [],
            "preview": "This page outlines how to use MongoDB Compass to connect to a\nMongoDB host. You can connect to a standalone, replica set,\nor sharded cluster host.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query-plan",
            "title": "View Query Performance",
            "headings": [
                "Visual Tree",
                "Raw JSON",
                "Limitations"
            ],
            "paragraphs": "The  Explain Plan  tab displays the execution plan for a\nquery. To view the execution plan for a query filter, click on the collection\non the left hand pane, then click  Explain Plan . You can view the explain stages in a tree format. Each stage of the\npipeline appears as a node on the tree. This makes sharded cluster\noutputs easier to understand and visualize. You can also view the explain details in raw JSON format: To learn more about execution plans, see the\n MongoDB documentation . The  Explain Plan  tab is not available if you are connected\nto  Data Lake . The  Explain Plan  tab is not available for\n aggregation commands . Instead,\nyou can utilize the  .explain()  method from  Embedded\nMongoDB Shell  in  Compass .",
            "code": [],
            "preview": "The Explain Plan tab displays the execution plan for a\nquery.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "import-export",
            "title": "Import and Export Data",
            "headings": [
                "Import Data into a Collection",
                "Limitations",
                "Format Your Data",
                "Procedure",
                "Connect to the deployment containing the collection you wish to import data into.",
                "Navigate to your target collection.",
                "Click the Add Data dropdown and select Import File.",
                "Select the location of the source data file under Select File.",
                "Choose the appropriate file type.",
                "Configure import options.",
                "Click Import.",
                "Export Data from a Collection",
                "Behavior",
                "Procedure",
                "Connect to the deployment containing the collection you wish to export data from.",
                "Navigate to your desired collection.",
                "Click Collection in the top-level menu and select Export Collection.",
                "Select document fields to include in your exported file.",
                "Choose a file type and export location.",
                "Click Export.",
                "Connect to the deployment containing the collection you wish to export data from.",
                "Navigate to your desired collection.",
                "Specify a filter in the Query Bar",
                "Click Collection in the top-level menu and select Export Collection",
                "Select document fields to include in your exported file.",
                "Choose the appropriate file type.",
                "Click Export.",
                "Connect to the deployment containing the collection you wish to export data from.",
                "Navigate to your target collection.",
                "Create an aggregation pipeline and run for results.",
                "Click Export.",
                "Choose the appropriate file type.",
                "Click Export.",
                "Import and Export Data from the Command Line"
            ],
            "paragraphs": "You can use  MongoDB Compass  to import and export data to and from\n collections .  Compass  supports import and\nexport for both  JSON  and  CSV  files. To import or export data to\nor from a collection, navigate to the detailed collection view by either\nselecting the collection from the  Databases  tab or\nclicking the collection in the left-side navigation. MongoDB Compass  can import data into a collection from either a  JSON  or\n CSV  file. Importing data into a collection is not permitted in  MongoDB Compass Readonly Edition . Importing data is not available if you are connected to a\n Data Lake . Before you can import your data into  MongoDB Compass  you must first ensure\nthat it is formatted correctly. When importing data from a  JSON  file, you can format your\ndata as: Newline-delimited documents, or Comma-separated documents in an array The following newline-delimited  .json  file is formatted\ncorrectly: The following comma-separated  .json  array file is also\nformatted correctly: Compass  ignores line breaks in JSON arrays. Compass  automatically generates  ObjectIDs  for these objects on import\nsince no ObjectIDs were specified in the initial JSON. When importing data from a  CSV  file, the first line of the\nfile must be a comma-separated list of your document field\nnames. Subsequent lines in the file must be comma-separated\nfield values in the order corresponding with the field order\nin the first line. The following  .csv  file imports three documents: MongoDB Compass  automatically generates  ObjectIDs  for these objects on import\nsince no ObjectIDs were specified in the initial CSV file. To import your formatted data into a collection: A progress bar displays the status of the import. If an error occurs\nduring import, the progress bar turns red and an error message\nappears in the dialog. After successful import, the dialog closes and\nCompass displays the collection page containing the newly imported\ndocuments. To learn how to connect to a deployment, see\n Connect to MongoDB . You can either select the collection from the\n Collections  tab or click the collection in the\nleft-hand pane. Compass  displays the following dialog: Under  Select Input File Type , select either\n JSON  or  CSV . If you are importing a CSV file, you may specify fields to import and\nthe types of those fields under  Specify Fields and Types .\nThe default data type for all fields is string. To exclude a field from a CSV file you are importing, uncheck the\ncheckbox next to that field name. To select a type for a field, use\nthe dropdown menu below that field name. Under  Options , configure the import options for your use\ncase. If you are importing a CSV file, you may select how your data\nis delimited. For both JSON and CSV file imports, you can toggle\n Ignore empty strings  and  Stop on errors : If checked,  Ignore empty strings  drops fields with\nempty string values from your imported documents. The document is\nstill imported with all other fields. If checked,  Stop on errors  prevents any data from being\nimported in the event of an error. If unchecked, data is inserted\nuntil an error is encountered and successful inserts are not rolled\nback. The import operation will not continue after encountering an\nerror in either case. MongoDB Compass  can export data from a collection as either a\n JSON  or  CSV  file. If you specify a\n filter  or  aggregation pipeline  for your collection,  Compass  only exports\ndocuments which match the specified query or\npipeline results. While it is possible to exclude documents by using a query filter,\nit is not possible to re-shape exported documents with a\n project  document. Even when you specify a\n project  option in the query,  Compass  still exports the\nentire document. To export an entire collection to a file: To learn how to connect to a deployment, see\n Connect to MongoDB . You can either select the collection from the\n Collections  tab or click the collection in the\nleft-hand pane. Compass  displays the following dialog: The export dialog initially displays the query entered in the query\nbar prior to export, if applicable. If no query was specified, this\nsection displays a  find  operation with no parameters, which\nreturns all documents in the collection. To ignore the query filter and export your entire collection, select\n Export Full Collection  and click\n Select Fields . Only fields that are checked are included in the exported file. You can add document fields to include with the  Add Field \nbutton if the field you want to include is not automatically detected. Under  Select Export File Type , select either\n JSON  or  CSV . If you select  JSON ,\nyour data is exported to the target file as a comma-separated\narray. Then, under  Output , choose where to export the file to. A progress bar displays the status of the export. If an error occurs\nduring export, the progress bar turns red and an error message appears\nin the dialog. After successful export, the dialog closes. To export a subset of documents from a collection: To learn how to connect to a deployment, see\n Connect to MongoDB . You can either select the collection from the\n Collections  tab or click the collection in the\nleft-hand pane. Specify a  filter  in the\n query bar  to export only the documents\nwhich match the filter. Compass  displays the following dialog: The top section of the export dialog displays the query\nentered in the query bar. If you did not specify a query in the query\nbar, you can specify a query here. Only fields that are checked are included in the exported file. You can add document fields to include with the  Add Field \nbutton if the field you want to include is not automatically detected. Compass  samples your collection to pre-populate a list of\nfields. Fields which only appear in a small percentage of\ndocuments may not be automatically detected. For details on sampling, see  Sampling . Under  Select Export File Type , select either\n JSON  or  CSV . If you select  JSON ,\nyour data is exported to the target file as a comma-separated\narray of JSON objects. Then, under  Output , choose where to export the file to. A progress bar displays the status of the export. If an error occurs\nduring export, the progress bar turns red and an error message appears\nin the dialog. After successful export, the dialog closes. To export results from your aggregation pipeline: To learn how to connect to a deployment, see\n Connect to MongoDB . You can either select the collection from the\n Collections  tab or click the collection\nin the left-hand pane. To learn how to create an aggregation pipeline, see  Create an\nAggregation Pipeline . Under  Select Export File Type , select either\n JSON  or  CSV . If you select  JSON ,\nyour data is exported to the target file as an array of JSON objects. Then, under  Output , choose where to export the file to. To import and export data from the command line, you can use MongoDB's\n Database Tools . See\n mongoimport  and\n mongoexport .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{ \"type\": \"home\", \"number\": \"212-555-1234\" }\n{ \"type\": \"cell\", \"number\": \"646-555-4567\" }\n{ \"type\": \"office\", \"number\": \"202-555-0182\"}"
                },
                {
                    "lang": "javascript",
                    "value": "[{ \"type\": \"home\", \"number\": \"212-555-1234\" }, { \"type\": \"cell\", \"number\": \"646-555-4567\" }, { \"type\": \"office\", \"number\": \"202-555-0182\"}]"
                },
                {
                    "lang": "none",
                    "value": "name,age,fav_color,pet\nJeff,25,green,Bongo\nAlice,20,purple,Hazel\nTim,32,red,Lassie"
                }
            ],
            "preview": "Import and export data with MongoDB Compass.",
            "tags": "import, export, atlas, compass, data, mongodb atlas",
            "facets": null
        },
        {
            "slug": "editions",
            "title": "Capabilities of Compass Editions",
            "headings": [],
            "paragraphs": "The following feature chart can help you choose the edition to best\nsuit your needs. Compass Compass Readonly Compass Isolated Interact with  documents ,\n collections , and\n databases  with full CRUD functionality \u221a \u221a Create and execute  queries  and\n aggregation pipelines \u221a \u221a \u221a Create and delete  indexes \u221a \u221a View and optimize query performance with visual\n explain plans \u221a \u221a Kerberos, LDAP, and x.509 authentication \u221a \u221a \u221a Schema Analysis \u221a \u221a \u221a Real Time Server Stats \u221a \u221a \u221a Create, delete and edit  document validation \nrules \u221a \u221a Error reporting and data usage collection \u221a \u221a Automatic updates \u221a \u221a",
            "code": [],
            "preview": "The following feature chart can help you choose the edition to best\nsuit your needs.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "collections",
            "title": "Collections",
            "headings": [
                "Collections Screen",
                "Collection Information",
                "Create a Collection",
                "Click the Create Collection button.",
                "Enter the collection information.",
                "Click Create Collection to create the collection.",
                "Drop a Collection",
                "Click the trash can icon to delete a collection.",
                "Confirm the collection to delete.",
                "Click Drop Collection to drop the collection.",
                "Collection Details",
                "Tabbed View",
                "Click the caret icon next to the database which contains the collection you wish to view.",
                "Hover over the desired collection.",
                "Click the appearing ellipses (...) button.",
                "Click Open in New Tab.",
                "Limitations"
            ],
            "paragraphs": "A collection is a grouping of MongoDB\n documents . Documents within a collection can\nhave different fields. A collection is the equivalent of a\ntable in a relational database system. A collection exists within a\nsingle  database The  Collections  screen lists the existing\n collections  and\n views  in the selected database. Each\nlist item includes the name and other general information for\nthe collection or view. To access the  Collections  screen for a database, from the\n Databases screen  either: Click a  Database Name  in the main  Databases \nview, or Click a database in the left navigation. The  Collections  screen displays the following\ninformation for each collection in the selected database: Collection name Number of  documents  in the collection Compass  bases the document count that appears on the\n Collections  screen on cached metadata using\n collStats . This count\nmight differ from the actual document count in the collection. For\nexample, an  unexpected shutdown  can throw off the count.\nUse the  db.collection.countDocuments()  method for the\nmost accurate document count. Average size of documents in the collection Total size of all documents in the collection Number of  indexes  on the collection Total size of all indexes on the collection Collation  properties for the\ncollection. Hover over a  Collation  banner to view\nthe properties for that collection. You can create new collections in an existing database. From the  Collections  screen, click the\n Create Collection  button. In the  Create Collection  dialog, enter the name of the\ncollection to create. Compass  also provides you with  Advanced Collection Options .\nYou can select from the following: Create a Capped Collection Create a Clustered Collection Create a Collection with Collation Create a Collection with Encrypted Fields Create a Time Series Collection From the  Collections  screen, click on the trash can for\nthe collection to delete. A confirmation dialog appears. In the dialog, enter the name of the collection to delete. The Collection Detail screen shows detailed information for a\ncollection, including the documents the collection contains. To see\ncollection details, either: After you select a collection,  Compass  shows you that\ncollection's  Documents tab .  Compass  provides\nthe following collection information and functionality in the detailed\nview: Click a  Collection Name  in the main\n Collections  screen, or Click a collection in the left navigation. Open the collection in a  new tab . Manage Documents Import and Export Data  to / from the collection Aggregation Pipeline Builder Schema Analysis View Query Performance Manage Indexes Set Validation Rules for Your Schema The following functionality is not available if you are connected to\na  Data Lake : Import data into a collection Schema Analysis View Query Performance Manage Indexes Set Validation Rules for Your Schema You can open multiple Collection Detail screens in separate tabs. To\nopen a new tab to view collection details: Creating and dropping collections is not permitted in  MongoDB Compass Readonly Edition . The  Create Collection  button is not available if you are\nconnected to a  Data Lake .",
            "code": [],
            "preview": "A collection is a grouping of MongoDB\ndocuments. Documents within a collection can\nhave different fields. A collection is the equivalent of a\ntable in a relational database system. A collection exists within a\nsingle database",
            "tags": null,
            "facets": null
        },
        {
            "slug": "submit-feedback",
            "title": "Submit Feedback",
            "headings": [
                "Enterprise Support",
                "Submit a Bug Report",
                "Procedure",
                "Vote on Bug Tickets",
                "Submit a Feature Request",
                "Procedure",
                "Find and Vote on Existing Feature Requests",
                "Other Feedback"
            ],
            "paragraphs": "Questions, concerns or feedback on  MongoDB Compass  are appreciated. If you have an enterprise or professional MongoDB subscription,\nyou can submit a ticket to the  Commercial Support JIRA  for direct feedback and support. To report a bug, submit a ticket to the\n MongoDB Compass JIRA . Click  Create  in the top navigation bar in JIRA to open\nthe ticket creation dialog. Set the  Issue Type  to  Bug . Provide a  Summary  of the issue. Set the  Component  to  Compass . Use the  Affected Version/s  to list the version(s) of\n Compass  in which the issue occurs. Use the  Environment  field to describe the operating\nsystem(s) in which the issue occurs. Use the  Description  to list the exact steps needed to\nreproduce the issue, Use the  Attachment  to upload screenshot(s) of the issue. After you login to JIRA, you can vote for a bug ticket in the\n People  section on the right-hand side of the ticket. Issues\nwith more votes are more likely to be prioritized by the Compass\ndevelopment team. You can submit  Compass  feature requests using the\n MongoDB Feedback Engine . The Feedback Engine directs you to a page with your feature request.\nYou automatically vote on all features you submit. Log in to the\n Feedback Engine \nusing your MongoDB account. Use the  Enter your idea  search bar to see if there are\nany matching or similar feature requests which have already been\nsubmitted. If those requests exist, you can\n vote on those requests . If you cannot find a matching existing feature request, click\n Post a New Idea . Fill in the requested information for your feature: Enter a title for your idea. (Optional) Select a category for your idea. Describe your idea. (Optional) Attach a screenshot or other document to help give\ncontext for your idea. Click  Post Idea . You can vote for features you would like to see added to  MongoDB Compass .\nFeature requests with more votes are more likely to be prioritized by\nthe Compass development team. To search for features, use the  Enter your idea  search\nbar. To vote for issues, click  Vote  for the issues you would\nlike to see added. For other feedback, email\n compass@mongodb.com .",
            "code": [],
            "preview": "Questions, concerns or feedback on MongoDB Compass are appreciated.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "in-use-encryption-tutorial",
            "title": "In-Use Encryption Tutorial",
            "headings": [
                "Overview",
                "Requirements and Limitations",
                "Create Your Encrypted Collection",
                "Procedure",
                "Click the Advanced Collection Options drop down.",
                "Check the Queryable Encryption box.",
                "Specify your Encrypted Fields.",
                "(Optional) Specfiy KMS Provider.",
                "(Optional) Specify Key Encryption Key.",
                "Click Create Database or Create Collection.",
                "Import Your Data",
                "Click on your collection on the left-hand navigation banner.",
                "Click Add Data.",
                "Click Import File.",
                "Select File and Input File Type.",
                "Click Import.",
                "Enable and Disable In-Use Encryption",
                "Disable In-Use Encryption",
                "Click on In-Use Encryption on left-hand navigation bar."
            ],
            "paragraphs": "In-Use Encryption allows you to connect to your deployments using  Queryable\nEncryption . This connection method allows you to\nencrypt a subset of fields in your collections. You can also use  CSFLE  to encrypt a subset of fields\nin your collection. CSFLE encryption is enabled through the schema editor. This guide shows you how to connect to your deployment and collections using\nQueryable Encryption. This guide uses the  air_airlines.json \ndata set in the guided examples. The guide covers the process of importing\nyour data set. In-Use Encryption is an Enterprise/Atlas only feature. You need a replica set to use this connection option. Your replica set can be\na single node or larger. You need to connect to your deployment on Compass using In-Use Encryption. For\nmore information on how to connect to your deployment, see  In-Use Encryption\nConnection tab . Once your deployment is connected using In-Use Encryption, create your collection\nusing Queryable Encryption. You can create a new database and collection or you\ncan create a new collection in an existing database. Click the  Create a Database  button or the\n Create a Collection  button. Enter the name of the database and/or collection. Change the  path  field value from  encryptedField  to the\nname of the field you want encrypted. Here, the encrypted field is the  base  field of the  air_airlines \ndata set. For more information, see  Encrypted Fields . The collection has a  Queryable Encryption  badge next to\nits name to indicate that fields in that collection are encrypted. Your imported collection is displayed in the document view. The specified\nencrypted field is marked by a key symbol next to the value. Here, the  base  field is marked with the key symbol. You can enable and disable In-Use Encryption in your deployment. When In-Use Encryption is  enabled : When In-Use Encryption is  disabled : You can modify encrypted values. You can insert documents and specified fields will be encrypted. You cannot modify encrypted values.  Compass  displays the values\nof these fields as a series of asterisks. Inserted documents can not encrypt fields. To disable In-Use Encryption: Click the  Enable In-Use Encryption for this connection \ntoggle. Disabling In-Use Encryption only affects how  Compass  accesses your\ndata.",
            "code": [],
            "preview": "In-Use Encryption allows you to connect to your deployments using Queryable\nEncryption. This connection method allows you to\nencrypt a subset of fields in your collections.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "sampling",
            "title": "Sampling",
            "headings": [
                "Sampling Method"
            ],
            "paragraphs": "Sampling in  MongoDB Compass  is the selection of a subset of documents from a\ncollection for analysis. Analyzing a sample set of data is a common\nstatistical analysis technique; the results of analyzing a sample set\ntend to be similar to the results of analyzing an entire data set. Compass  uses sampling for efficiency. Generally, standard\nsample sets can be selected and analyzed in a few seconds. Analyzing\nlarge samples or entire collections demands significantly more time and\nprocessing power. MongoDB Compass  samples 1,000 documents from a collection using the\n $sample \noperator via the\n aggregation pipeline . This\nprovides efficient, random sampling without replacement over an entire\ncollection, or over the subset of documents specified by a query.",
            "code": [],
            "preview": "Sampling in MongoDB Compass is the selection of a subset of documents from a\ncollection for analysis. Analyzing a sample set of data is a common\nstatistical analysis technique; the results of analyzing a sample set\ntend to be similar to the results of analyzing an entire data set.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "documents",
            "title": "Manage Documents",
            "headings": [],
            "paragraphs": "Documents are individual records in a MongoDB  collection  and are the basic unit of data in MongoDB. From the  Documents  tab, you can\n view ,  insert ,\n modify ,\n clone , and\n delete  documents in your selected\ncollection or view. From the  query bar , you can specify a query to\nfilter the displayed documents. Click  Options  to\nspecify query options. For query result sets larger than 1000 documents, Compass\nshows a sampling of the results.  Otherwise, Compass\nshows the entire result set. For details on sampling, see  Sampling . View Documents Insert Documents Modify Documents Clone Documents Delete Documents",
            "code": [],
            "preview": "Documents are individual records in a MongoDB collection and are the basic unit of data in MongoDB.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "schema",
            "title": "Analyze Your Data Schema",
            "headings": [
                "Overview",
                "Query Bar",
                "Field Descriptions",
                "Field with a Single Data Type",
                "Field with Multiple Data Types",
                "Missing Field",
                "Strings",
                "Numbers",
                "Dates and ObjectIDs",
                "Embedded Documents and Arrays",
                "GeoJSON and [longitude,latitude] Arrays",
                "View Charts of Mixed Types",
                "Query Builder",
                "Click the chart value.",
                "Optional. Select multiple values.",
                "Optional. Click on other field values to create a compound query.",
                "Optional. Deselect a value.",
                "Run the query",
                "Analyze Location Data",
                "Apply a Location Filter",
                "Edit a Location Filter",
                "Delete a Location Filter",
                "Troubleshooting"
            ],
            "paragraphs": "The  Schema  tab provides an overview of the data type\nand shape of the fields in a particular collection. Databases\nand collections are visible in the left-side navigation. The overview is based on  sampling \nthe documents in the collection. The schema overview may include\nadditional data about the contents of the fields, such as the\nminimum and maximum values of dates and integers, the frequency of\noccurrence of particular values, and the cardinality of the data. MongoDB has a  flexible schema model , which means that some fields may\ncontain different types of data from one document to the next. For\nexample, a field named  address  may contain strings and integers in\nsome documents, objects in others, or some combination of all three. In the case of heterogenous fields, the  Schema  tab shows a\nbreakdown of the various data types contained within the field with the\npercentage of each data type represented. The  Schema  tab shows size information about the\n test.restaurants  collection at the top, including the total\nnumber of documents in the collection, the average document size,\nand the total disk space occupied by the collection. The following fields are shown with details: The  _id  field is an\n ObjectId .\nEach ObjectId contains a timestamp, so Compass displays the range\nof creation times for the sampled documents. The  address  field contains four nested fields. You\ncan expand the field panel to see analyses of each of the nested\nfields. The  borough  field contains a string indicating the borough in\nwhich the restaurant is located. The cardinality is low enough\nthat Compass can provide a graded bar of the field contents, with\nthe most-frequently occurring string on the left. The  categories  field contains arrays of strings. The analysis\nshows the minimum, maximum, and average array lengths. Using the  query bar  in the  Schema  tab,\nyou can create a query filter to limit your result set. Click the\n Options  button to specify query options, such as the\nparticular fields to display and the number of results to return. In the  Schema  tab, you can also use the  Query Builder  to\nenter a query into the query bar. For each field, Compass displays summary information about the data\ntype or types the field contains and the range of values. Depending\non the data type and the level of cardinality, Compass displays\nhistograms, graded bars, geographical maps, and sample data to provide\na sense of the shape and scope of the data contained in each field. Below is an example of the data type summary for a field called\n last_login  which contains data of type  date . For fields that contain multiple data types,\nCompass displays a percentage breakdown of\nthe various data types across documents. In the example below,\nthe chart shows the contents of a field called  phone_no  in which\n81% of documents are of type  string , and the remaining 19% are of\ntype  number . If a collection contains documents in which not all fields contain\na value, the missing values display as  undefined . In the example\nbelow, the field  age  has no recorded value in 40% of the sampled\ndocuments. Strings can appear in three different ways. If there are\nentirely unique strings in a field, Compass shows a random\nselection of string values from the specified field. Click\nthe circular refresh icon to see\na new set of randomly selected values from the field. If there are only a few different string values,\nCompass shows the strings in a single graded bar which\nshows the percentage of the population of the string values. If there are multiple string values with some duplicates,\nCompass shows a histogram indicating the frequency of\neach string found within the field. Move the mouse over each bar to display a tooltip which shows the\nvalue of the string. Numbers are similar to strings in their representation.\nUnique numbers are shown in the following manner: Duplicate numbers are shown in a histogram that indicates their\nfrequency: Fields that represent dates (and fields that contain the ObjectID\ndata type, which includes a timestamp) are shown across multiple\nbar charts. The two charts on the top row represent the day of the\nweek and time of day of the timestamp value. The single chart on the bottom shows the first and last timestamp\nvalue, and the vertical lines represent the distribution of the\ntimestamp across the range of first to last. Fields that contain a sub-document or an array are displayed with\na small triangle next to them and a visual representation of the\ndata contained within the sub-document or array. Click on the triangle to expand the field and view the embedded\ndocuments: Fields that contain GeoJSON data or  [longitude,latitude]  arrays are\ndisplayed with interactive maps. For more information on interacting\nwith location data in  Compass , see  Analyze Location Data . Third party mapping services are not available in\n Compass Isolated Edition . If a field has mixed types, you can view different charts of each type\nby clicking on the  type  field. In the example below, the  age \nfield shows the values that are strings: Clicking on the  number  type causes the chart to show its numeric\ndata: In the  Schema  tab, you can type the filter manually into\nthe query bar or generate the filter with the Compass query builder.\nThe query builder allows you to select data elements from one or more\nfields in your schema and construct a query matching the selected\nelements. The following procedure describes the steps involved in\nbuilding a complex query with the query bar. You can compose the initial query filter by using the clickable query\nbuilder and then manually edit the generated filter to your exact\nrequirements. In the  Schema  view, you can click on a chart value to\nbuild a query. For example, the following image shows the query\nfilter built by clicking the  EWR  value for the\n departureAirportFsCode  field. To select multiple values for a field, click and drag the cursor\nover a selection of values, or press shift+click on the desired\nvalues. For example, the following image shows shows the compound query\nbuilt by selecting a value in the  flightId  field. To deselect a previously selected value, shift+click on\nthe selected value: To run the query, click  Analyze . Click  Reset \nto clear your query. In the  Schema  tab, you can use interactive maps to filter\nand analyze location data. If your field contains\n GeoJSON data  or\n [longitude,latitude]  arrays, the  Schema  tab displays\na map containing the points from the field. The data type\nfor location fields is  coordinates . You can apply a filter to the map to only analyze a specific\nrange of points. To define a location filter: The query bar updates as you draw location filters to show\nthe exact coordinates used in the\n $geoWithin  query\napplied to the schema analysis. If you specify multiple location filters, the query becomes\nan  $or  query\nwith multiple  $geoWithin  operators. Click the  Circle  button at the top-right\nof the map. Click and drag on the map to draw a circle containing the area of\nthe map you want to analyze. Repeat this process as desired to include additional areas of\nthe map in the schema analysis. To move or resize a location filter, click   on the\nright side of the map. You will enter the filter editing mode, which\nlooks like this: After modifying your filters, click  Save . Click and drag the square in the center of the circle. Click and drag the square at the edge of the circle. To delete a location filter from the map: Click   on the right side of the map. Either click: A location filter to delete that filter. Clear All  to delete all location filters. Click  Save . If the analysis of your schema times out, it might be because the\ncollection you are analyzing is very large, causing MongoDB to stop the\noperation  before the analysis is complete. Increase the value of\n MAX TIME MS  to allow the operation time to complete. To increase the value of  MAX TIME MS : Once you have increased the value of  MAX TIME MS , retry your schema\nanalysis by clicking  Analyze . In the query bar, expand  Options . Increase the value of  MAX TIME MS  to accommodate your collection.\n MAX TIME MS  defaults to 60000 milliseconds, or 60 seconds, but large\ncollections might take tens of seconds to analyze.",
            "code": [],
            "preview": "The Schema tab provides an overview of the data type\nand shape of the fields in a particular collection. Databases\nand collections are visible in the left-side navigation.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "export-query-to-language",
            "title": "Export Query to Specific Language",
            "headings": [
                "Procedure"
            ],
            "paragraphs": "New in version 1.15.0 You can export queries created in the  query bar  to one of the supported languages; Java, Node,\nC#, Python 3, Ruby, Go, Rust, and PHP. This feature allows you to reformat\nand use  MongoDB Compass  queries in your application. After constructing a query in the\n query bar , click   to\nthe right of the  Reset  button. Click the  Export to Language  button  </> : In the  Export Query To:  dropdown, select your desired\nlanguage: The  My Query  pane on the left displays your query in\n mongo  shell syntax. The pane to the right displays your query in the language selected. (Optional) : Check the  Include Import Statements  option\nto include the required import statements for the language selected. (Optional) : Check the  Include Driver Syntax  option\nto include application code for the language selected. If you\ninclude driver syntax, the copyable code reflects\n project ,  sort ,\n maxtimems ,\n collation ,  skip \nand  limit  options. Click   at the top-right of the formatted\nquery to copy the query for the selected language to your clipboard.\nYou can now easily integrate and execute your created query in\nyour application. Click  Close  to return to the\n Documents Tab .",
            "code": [],
            "preview": "New in version 1.15.0",
            "tags": null,
            "facets": null
        },
        {
            "slug": "release-notes",
            "title": "Release Notes",
            "headings": [
                "MongoDB Compass 1.34.1",
                "MongoDB Compass 1.33.1",
                "MongoDB Compass 1.33.0",
                "MongoDB Compass 1.32.3",
                "MongoDB Compass 1.32.2",
                "MongoDB Compass 1.32.1",
                "MongoDB Compass 1.32.0",
                "MongoDB Compass 1.31.3",
                "MongoDB Compass 1.31.2",
                "MongoDB Compass 1.31.1",
                "MongoDB Compass 1.31.0",
                "MongoDB Compass 1.30.1",
                "MongoDB Compass 1.29.6",
                "MongoDB Compass 1.29.5",
                "MongoDB Compass 1.29.4",
                "MongoDB Compass 1.28.4",
                "MongoDB Compass 1.28.1",
                "MongoDB Compass 1.26.1",
                "MongoDB Compass 1.26.0",
                "MongoDB Compass 1.25.0",
                "MongoDB Compass 1.24.1",
                "MongoDB Compass 1.23",
                "MongoDB Compass 1.22",
                "MongoDB Compass 1.21",
                "MongoDB Compass 1.20",
                "MongoDB Compass 1.19",
                "MongoDB Compass 1.18",
                "MongoDB Compass 1.17",
                "MongoDB Compass 1.16",
                "MongoDB Compass 1.15",
                "MongoDB Compass 1.14",
                "MongoDB Compass 1.13",
                "MongoDB Compass 1.12",
                "MongoDB Compass 1.11",
                "MongoDB Compass 1.10",
                "MongoDB Compass 1.9",
                "MongoDB Compass 1.8",
                "MongoDB Compass 1.7",
                "MongoDB Compass 1.6",
                "MongoDB Compass 1.5",
                "MongoDB Compass 1.4",
                "MongoDB Compass 1.3",
                "1.3.0-beta.3 - July 12, 2016",
                "1.3.0-beta.2 - June 29, 2016",
                "1.3.0-beta.0 - June 27, 2016",
                "MongoDB Compass 1.2",
                "1.2.0-beta.3 - June 23, 2016",
                "1.2.0-beta.2 - June 1, 2016",
                "1.2.0-beta.1 - May 10, 2016",
                "MongoDB Compass 1.1",
                "1.1.1 -- Jan 19, 2016",
                "MongoDB Compass 1.0",
                "1.0.1 -- Dec 18, 2015",
                "Bug Fixes",
                "Improvements"
            ],
            "paragraphs": "Released November 21, 2022 New Features: Bug Fixes: Full changelog available on GitHub . Add command-line interface and global configuration ( COMPASS-6069 ,\n COMPASS-6070 ,  COMPASS-6071 ,  COMPASS-6073 ,\nand  COMPASS-6074 ) Flip the new toolbars feature flag, always show new toolbars\n( COMPASS-5679 ) Add autocompleter for aggregation, use autocompleter in import pipeline\nmodal ( COMPASS-6175 ) Add  protectConnectionStrings  option ( COMPASS-6066 ) Adds the  networkTraffic  configuration option to block outgoing network\nconnections ( COMPASS-6065 ) Show icons in the sidebar menus ( COMPASS-6081 ) Rebranding components ( COMPASS-6100 ,  COMPASS-6101 ,\n COMPASS-6121 ,  COMPASS-6048 , and  COMPASS-6187 ) Layout improvements ( COMPASS-6148 ,  COMPASS-6150 , and\n COMPASS-5582 ) Add theme as regular setting ( COMPASS-6067  and  COMPASS-5284 ) Fix installation issues on Windows ( COMPASS-6315 ) Fix map rendering and add e2e tests ( COMPASS-6131 ) Reconnect CSFLE client after  collMod  ( COMPASS-5989 ) Improve selection area for insert document editor Add map for collection stats for tab namespace isolation\n( COMPASS-6146 ) Open info links in browser ( COMPASS-6193 ) Menu not fully showing for field actions, remove old backgrounds\n( COMPASS-6186 ) Released September 14, 2022 New Features: Bug Fixes: Full changelog available on GitHub . Update saved aggregations to open as popover ( COMPASS-5852 ) Add error message hint for crud timeout message ( COMPASS-4638 ) Show namespace on saved queries and pipelines popovers ( COMPASS-6028 ) Add sparse option for indexes ( COMPASS-1963 ) Only show columnstore index option for mongodb server >= 7 ( COMPASS-5970 ) Add progress badge to the indexes table ( COMPASS-5944 ) Fix table header for indexes ( COMPASS-6042 ) Adjust crypt shared library download script for M1 builds Hide collection submenu on disconnect ( COMPASS-6047 ) Align delete index modal text Fix updating arrays with dots in names ( COMPASS-6011 ) Hide document views when there are no documents Fix import deep JSON overwriting variables ( COMPASS-5971 ) Released August 31, 2022 New Features: Full changelog available on GitHub . arm64 build for darwin is now available ( COMPASS-5574 ) Released July 13, 2022 New Features: Bug Fixes: Full changelog available on GitHub . bson-transpilers: Export to PHP from Compass ( PHPLIB-719 ) compass-components: Enable ACE code formatter ( COMPASS-5923 ) compass-indexes: Update toolbar to leafygreen components ( COMPASS-5676 ) connect: Add Save & Connect button ( COMPASS-5776 ) explain-plan-helper: Add support for indexes in stages ( COMPASS-5878 ) Automatically refresh after CSFLE insert ( COMPASS-5806 ) Improve Binary handling ( COMPASS-5848 ) Align elements on the create collection modal ( COMPASS-5921 ) connection-form: Align advanced tab and input field widths import: Pre-create an empty object before creating its properties ( COMPASS-5076 ) ace-autocompleter: Provide a special snippet for $merge stage in ADL connect-form: Connect to the newly created favourite ( COMPASS-5776 ) documents: Fixes to recent queries queries: Ignore duplicate recent queries ( COMPASS-2237 ) aggregation-explain: Show indexes ( COMPASS-5879 ) explain-plan-helper: Use execution time of cursor stage ( COMPASS-5858 ) Released June 7, 2022 Fixes an issue where  $merge  and  $out  aggregation stages would\nnot appear in the pipeline builder when connected to a  Data Lake . Full changelog available on GitHub . Released June 3, 2022 New Features: Bug Fixes: Full changelog available on GitHub . Enables In-Use Encryption ( COMPASS-5634 ) Show index keys in aggregation explain plan ( COMPASS-5857 ) Open aggregation pipeline in correct namespace ( COMPASS-5872 ) Hide  $documents  operator in collection aggregations\n( COMPASS-5843 ) Released May 31, 2022 New Features: Bug Fixes: Full changelog available on GitHub . Adds explain plan for aggregations ( COMPASS-5788 ) Allows import into Queryable Encryption collections\n( COMPASS-5810 ) In the pipeline builder, hide the stage error message when changing\nthe aggregation operator ( COMPASS-5684 ) Remove unique option on columnstore index creation\n( COMPASS-5830 ) Reconnect the SSH tunnel when it gets disconnected\n( COMPASS-5454 ) Released May 17, 2022 New Features: Bug fixes: Full changelog available on GitHub . Export aggregation pipelines to Go. Bump Node driver to version 4.6.0 and embedded shell to version 1.4.1\n( COMPASS-5619 ). Support columnstore indexes and clustered collections\n( COMPASS-5665 ,  COMPASS-5666 ). Add  srvMaxHosts  to advanced connection options. Disable aggregation toolbar options when pipeline is invalid. Style improvements. In connection form, allow empty hosts. In aggregation pipeline builder, update default document preview\namount from 10 to 20. Resize elements for improved visibility. Released April 14, 2022 Bug fixes: Full changelog available on GitHub . Aggregation screen no longer shows a \"Cannot have two html5 backends\"\nerror. ( COMPASS-5655 ) Connections that use certificates no longer fail with \"option\nusesystemca is not supported\" ( COMPASS-5729 ) You can edit null values in CRUD view ( COMPASS-5697 ) Invalid UUID values display correctly in CRUD view\n( COMPASS-5726 ) Editing Int64 values in JSON view no longer changes their type to\nInt32 ( COMPASS-5710 ) Released April 05, 2022 Bug Fixes: Full changelog available on GitHub . Fixed \"rendering AggregationsPlugin\" error. CRUD Fixes Fixed a bug that updated a documents data type to String when\nediting a field of data type Date in CRUD Document view. Released March 31, 2022 New Features: Bug Fixes: View this release on  GitHub . All JIRA issues closed in 1.31.0 . New connection experience Add new form for Kerberos options. Support loading system CA store. Use new favorite connection modal in sidebar. Add support for MONGODB_AWS. Aggregation and Query Improvements New saved aggregation and queries view. Add link and descriptions for the  $densify  aggregation stage. Add ability to export queries and aggregations to Ruby. Update aggregation result preview card styles. Schema Tab Fixes Fix shift selecting multiple items in schema tab. Unambiguously display latitude and longitude on map. CRUD Fixes Allow empty JSON input. Increase input width for query bar max timeout ms area. Miscellaneous Fixes Add  directConnection=true  when converting from old model. Pick only specified columns when exporting data as JSON. Hide SSH tunnel password. Released January 13, 2022 New Features: Bug Fixes: All JIRA issues closed in 1.30.1 . Add link and descriptions for the  $documents .\naggregation stage. Connect form: Add SSL/TLS option radio box group. Databases and Collections: Add async loading states for databases and\ncollections list. Export secrets methods and parse raw models. Styles: Add darkreader dark theme option. See  Enable Dark Mode . Connections: Add general tab contents to connect form. Support MongoDB 5.2 aggregations. Remove unused vars. SSH Tunnel: Remove unused import. BSON Transpilers: Account for bson Decimal128 validation changes. Make SSH tunnel use Socks5. You can now connect to replica sets and\nsharded clusters using an SSH tunnel. Compass Logging: Bump mongodb-log-writer to allow browser envs. Move theme menu from help to view in non mac/darwin. Connections: Hide socks tab on SSH form. Add SSH label. Remove compass-components from prod dependencies. toggle-shell: Use key instead of keyCode. data-service: Do not return name from adapted dbStats Do not ignore directConnection=false mocha-config-compass: Disable source map processing when running code\nin electron / web runtime in tests Released December 20, 2021 New Features: Bug Fixes: Full changelog available on GitHub . Adds loading states for collection in sidebar. Improves identification of Atlas cluster. Improve telemetry connection tracking. Dependency Upgrades: Bumps  react-ace  to\nversion 9.5.0. Bumps Node.js driver to version\n 4.2.1 . Bump  mongosh  version to  1.1.6 . Removes expired link from license. Fixes error handling in  listCollections . Keeps  tlsCertificateFile  as URI parameter. Hides full-text search stages for time series and views. Does not overfetch  connectionInfo  and update the state\ntoo often. Released November 24, 2021 Bug Fixes: Full changelog available on GitHub . Fixes connection with TLS / SSL options. Fixes document searching for Serverless Atlas. collStats  now always shows for collections on the\ncollection screen. Collection menu now appears when collection is selected. Released November 16, 2021 New Features: Supported Platforms: Full changelog available on GitHub . Adds  client-side logging  for  MongoDB Compass \noperations. Improved  MongoDB Compass  startup time. Adds support for  MongoDB 5.1 features . Improved reliability for connections. MongoDB Compass  now uses: Electron version 13 Node version 14 MongoDB Compass  for macOS can now run on M1 platforms that have Rosetta or\nRosetta 2 installed. For more information, see  Software\nRequirements . Released August 30, 2021 New Features: Bug Fixes: Full changelog available on GitHub . Enables resizing the preview area for aggregation pipelines. Allows hiding the  Query History  and\n Export to Language  buttons in the query view. Bumps  mongosh  version for the embedded shell to  1.0.4 . Properly supports all Kerberos options. Fixed an issue with geospatial queries being incorrectly merged. Released July 13, 2021 New Features: Bug Fixes: Full changelog available on GitHub . Adds support for load balancer connections. Adds a  Granularity  option when creating a time series\ncollection. Disallows editing schema validation for time series collections. Hides the  Drop Collection  button in readonly Compass. Geoqueries no longer populate query bar fields with  null . Released April 9, 2021 New Features: Bug Fixes: Allows functions in the query bar and aggregations. When navigating to the  Databases  view,\n Compass  now clears a previously selected collection\nfrom the left navigation. Updates the  embedded MongoDB Shell  to\nversion  0.9.0 . Compass  now displays the expected value when you update\nfields in the table view. Creating a collection or database is now prohibited when form\nfields are empty. Schema tab graphs no longer fail to render when switching tabs. SSH tunnel no longer hangs on disconnect. Released March 3, 2021 New Features: Bug Fixes: Adds ability to create  text indexes . Adds ability to cancel a connection attempt. Data is now refreshed when  Find  is clicked in the query\nbar. Improvements to  schema analysis  to prevent\ntimeouts with large datasets. Improves connection form input and validation. MongoDB Compass prevents inserting data via the JSON editor without\nspecifying a document. Previously, Compass would silently error when a\ndocument was not specified. Saving a favorite connection no longer freezes MongoDB\nCompass. Stylistic fixes. Released January 13, 2021 New Features: Bug Fixes: Updates the  embedded MongoDB Shell  to\nversion  0.6.1 . Improvements to connection validation. Compass no longer crashes during startup on certain versions of\nWindows. For more information see\n COMPASS-4510 . When connecting to a MongoDB deployment, Compass no longer\nautomatically inserts a value of  27017  for  Port \nwhen  Port  is left blank. Compass no longer displays the incorrect port number when connecting\nto MongoDB via SRV record. Released December 9, 2020 New Features: Bug Fixes: Adds support for updates on sharded collections. Adds support for the  print()  method in the\n embedded MongoDB Shell . Updates the  embedded MongoDB Shell  to\nversion  0.5.2 . Provides better readonly and view handling. Adds support for multi-line string editing in the field-by-field\neditor. Provides a descriptive tooltip when selecting an aggregation stage\nin the  Aggregation Pipeline Builder . Non-editable fields can now be deleted in the field-by-field editor. Fixes connection URI issues with SCRAM-SHA-256. Adds support for  $out  when connected to a\n Data Lake . Removes broken import and export sidebar actions. Improves  x.509  authentication. Makes the  x.509  username\noptional in connection validation and improves validation error\nmessages. Various other bug fixes and improvements. Released November 4, 2020 Notarizes  MongoDB Compass  for macOS Catalina. You should no longer need to\nmanually allow macOS to trust  MongoDB Compass  before running. Kerberos authentication improvements on RHEL7. Importing a text pipeline containing a  $out  stage no longer\ncrashes  MongoDB Compass . Various other bug fixes and improvements. Released September 3, 2020 Added an  embedded MongoDB Shell . You\ncan use MongoDB Shell to test queries and operations in an interactive\nJavaScript interface. Released April 28, 2020 Improved experience for\n importing and exporting data . Improved CSV parsing when importing data. Added support for importing a subset of fields from CSV. Provides guidance to upgrade from Community Edition. Community Edition\nis now deprecated. To learn more, see  Migrate to Compass from Compass Community . Various bug fixes and improvements. Released December 5, 2019 On macOS systems, the first time that you update  MongoDB Compass  to version\n1.20 or later, you will need to allow access to your system storage\n for each  saved connection in  Recents  and\n Favorites . To learn more, see  Allow Keychain Access for Recent and Favorite Connections . Added the option to include driver syntax when\n exporting queries to a language . New and improved  Connection  experience\nwith support for all connection options. Improved user experience for saving and sharing\n Favorite Connections . Added JSON mode for managing documents. With JSON mode, you can\nnow insert multiple documents at once. Added support for querying UUIDs via the\n Documents  query bar or in the\n Aggregation Pipeline Builder . Added support for the following aggregation pipeline operators: $set $unset $replaceWith Improved inline documentation for aggregation pipeline arguments. Removed  $limit \nahead of the\n $count  stage in\nthe aggregation pipeline builder to ensure accurate counts on large\ncollections. Prior versions of  MongoDB Compass  placed a  $limit  stage\nbefore  $count  stages in the\n Aggregation Pipeline Builder  for large\ncollections, even when sample mode was disabled. Various bug fixes and improvements. Released August 11, 2019 Added support for: Views . You can create\nviews based on results from an\n aggregation pipeline . Wildcard Indexes . Killing long-running operations from the\n Performance Tab . Adjusting the maximum timeout  for\nqueries executed in the Query Bar. New settings available in the\n aggregation pipeline builder . You can\nnow specify a sample size, number of documents to preview, and a\nmaximum timeout for your pipeline operations. Obscures fields encrypted with Field-Level Encryption. These fields\ncannot be modified by  Compass  users. Compass  now warns users who are connected to non-genuine\nMongoDB servers. For more information, see\n this entry in the FAQ . Released May 17, 2019 Provided fixes to the  Compass  Windows installer. With the\nnew  .msi  installer you can: Select the destination of the  Compass  installation. Install  Compass  for all users. Script the  Compass  installation and perform a quiet\ninstall. Added support for Ubuntu 18.10 and other recent Linux distributions. New  Schema Validation  experience. Added support for\n JSON schema validation . Includes smart editor with autocomplete. For macOS systems,  Compass  now requires macOS 10.12 or greater. Released March 4, 2019 Performance improvements to the  Documents \nand  Aggregation  tabs, specifically with\ndeeply nested documents. Fixed several connection issues. Fixed Kerberos connections where hostname is not the canonical\nname. Fixed SRV connections with special characters in the password. Compass  no longer allows direct connections to\n secondary  databases, which would result in hangs on the\nloading navigation screen. Fixed connections to  M0 \n Atlas  clusters with\nreadonly users. Fixed issue where  usersInfo  command was not available\nto the data service. authSource  now correctly defaults to  admin  when connecting to\n Atlas . Compass  now properly forces a disconnect when requested. Released November 12, 2018 Added  collation  support to the following features: Create a Collection Create a Database Create an Index Query Your Data Aggregation Pipeline Builder Added the ability to find text within a page using either\n Ctrl + F  or  Command + F , depending on your\nplatform. Reduced the required permissions to use  MongoDB Compass . As of this\nversion of  MongoDB Compass , users require the\n read  permission to access a database in  Compass . Updated dates to display in  UTC (Universal Time Coordinated) \ntime. Added support for  SCRAM-SHA-256  authentication mechanism. Various bug fixes and improvements. As of this version, you should not provide a  Password  when\nusing  Kerberos  as the authentication mechanism. Released August 23, 2018 Added support for  importing plain text pipelines  into the\n Aggregation Pipeline Builder . Added support for  exporting aggregation pipelines  and  exporting queries  in the syntax of the following languages: Java Node C# Python 3 Released June 26, 2018 Added  Aggregation Pipeline Builder ,\nwhich provides the ability to execute\n aggregation pipelines  to\ngain additional insight into your data. Added  MongoDB Compass   Isolated Edition  for highly secure\nenvironments. This edition does not initiate any network requests\nexcept to the MongoDB server. Released May 3, 2018 Added ability to\n import and export data  in  JSON  and\n CSV  format. Released March 5, 2018 Added  MongoDB Compass   Readonly Edition  which limits certain\n CRUD operations  within your organization. The following actions are  not  permitted in Compass Readonly Edition: All other functionality remains the same as in standard  MongoDB Compass . Create and drop databases Create and drop collections Create, delete, edit and clone documents Create and drop indexes Create, delete and edit document validation rules Added support for  connecting to Compass  using an\n SRV record (Service record) . In the connect dialog, if\nCompass detects an SRV record URI on the clipboard it\nauto-completes the dialog based on the SRV record. Made various performance and stability inprovements to the documents tab. Released December 17, 2017 Added support for plugins\nthat extend the functionality of  MongoDB Compass . Added support for  disconnecting  from the active\nMongoDB instance without restarting  MongoDB Compass . Added  Table View  for documents as a\nmethod of viewing the contents of a collection in tabular format. Released Oct 25, 2017 Now available in two editions, Compass Community and Compass. Compass provides the following features not in the Community edition: Kerberos Authentication LDAP Authentication x509 Authentication Schema Analysis Real Time Server Stats Document Validation Released Oct, 2017 Added autocomplete functionality to the query bar. Compass automatically stores up to 20 most recent queries for each\ncollection. From the past queries view for a collection, you can\nview the  recent  queries as well as the\nqueries saved as  favorites  . For more\ninformation, see  View Recent Queries . When a user connects to a  MongoDB instance ,\nCompass now displays: For more information, see  Compass Home . The connection name if the connection is a favorite connection or\n\"My Cluster\" if it is not. The type of deployment (standalone, replica set, sharded cluster).\nIf the deployment is a replica set and the replica set name is\nspecified in the connection window, the number of replica set\nmembers will also be displayed. Released Aug 2, 2017 Documents tab is the default Schema sampling only on demand Explain executed only on demand Improved Document Editing Deployment Awareness (and read preference) Added ability to specify replica set name and read preference in\nconnection screen. Added ability to parse MongoDB URI string in the connection screen. Allow typing index field names in addition to dropdown Use Client Meta Data to identify Compass application name in server logs New Loading animation Released Jun 7, 2017 Added ability to include options in the  query bar . Added ability to add or delete database/collection from the left-hand navigation sidebar. Added ability to collapse the left-hand navigation sidebar. Released Mar 1, 2017 Added support for Linux: Ubuntu 14.04+ and RHEL 7+. Added ability to zoom in and zoom out of panels. Released Nov 29, 2016 Added ability to  create  and  drop  databases. Added ability to  create  and  drop  collections. Added ability to  create indexes . Added support for  document validation . Improved security when connecting to Atlas. During Connection setup,\n MongoDB Compass  supports the use of System Certificate Authority for\nTLS/SSL connections to Atlas Deployment. Provides  Real Time Performance  stats. Released Nov 1, 2016 Add support for connecting to Atlas. Various bug fixes and improvements. Released Sep 15, 2016 Allow specifying the value of the  _id  field when inserting new\ndocuments. Set the default field and value sizes to  1  when adding a new key\nto a document. Typing \" : \" in the key input field tabs to the value input field when\nediting a document. Only allow addition of one element at a time if the field name in the\nnew element is blank when editing a document. CRUD documentation now available in the application help menu. Fix element autofocus on add. Bug: Small Bug Fixes identified at MongoDB World New: CRUD single document create, update, delete New: SSH tunnel support New: Tree explain plan view New: Geographic query builder and visualization Explicit opt-in for \"3rd party maps\" usage Improve display of binary data in in the document viewer Query builder on numeric histograms should leave bounds open Intercom overlay button now visible Load preferences defensively, catching parsing errors and reset preferences Compass Treasure Hunt for MongoDB World Released Jun 27, 2016 Beta installs alongside the stable release as a distinct application,\nwith distinct preferences Index view Explain plan view Documents view moved to a separate tab Automatic updates Bug: Feature Tour does not show on first launch Bug: Compass fails to start with JavaScript error in main process:\n SyntaxError: Unexpected end of input Bug: No error displayed message when an authentication error occurs Bug: Compass does not handle $indexStats fetch failure on MongoDB 3.2 NEW: Added explain plan view Added feature tour points of new 1.2 features Bugfix: After increasing maxTimeMS timeout, query default falls back\nto 100 docs Released Jan 19, 2016 Released Dec 7, 2015 MongoDB Compass  1.0 is now available. It helps users\nto visually analyze and understand their MongoDB data. Query builder bug in unique minicharts when resetting Hang: Do something graceful after closing/opening laptop lid & using\nCompass again Error in  Compass.app/Contents/Resources/app/node_modules/scout-server/lib/models/token.js:20 Pass  readPreference.nearest  in  lib/routes/collection.js Enterprise/Community version not correctly detected for MongoDB 2.6, 3.0 Compass hangs when upper case host alias used in connection Reduce reservoir sampling limit to 10,000 documents Possible race condition when reading from IndexedDB Cannot access DBs with colon (\":\") in their name Cannot read property 'authInfo' of undefined in mongodb-instance-model/lib/fetch.js:297 Cannot access DBs with octothorp ( # ) in their name Failure to sample on first collection selected ObjectID visualization missing last tooltip Change intercom message/menu item to \"Provide Feedback\" Open external links in user's web browser, not Electron Place SSL \"Client Certificate\" field above \"Client Private Key\" Re-enable highlighting/selecting of some UI elements Replace Help entry stubs with actual text Use consistent titles across windows Simplify language in opt-in panel Reduce font size of header to accommodate full db.collection name Remove \"\u2013\" (minimize) on Intercom Run shrinkwrap to lock Compass 1.0 dependencies Confirm successful Evergreen builds from release-1 branch Compass fails to connect to hostname",
            "code": [],
            "preview": "Released November 21, 2022",
            "tags": null,
            "facets": null
        },
        {
            "slug": "embedded-shell",
            "title": "Embedded MongoDB Shell",
            "headings": [
                "Open the Embedded MongoDB Shell",
                "Use the Embedded MongoDB Shell",
                "Multi-Line Operations in the Embedded MongoDB Shell",
                "Learn More"
            ],
            "paragraphs": "Starting in version 1.22,  MongoDB Compass  contains an embedded shell,\n mongosh .  mongosh  is a JavaScript environment for\ninteracting with MongoDB deployments. You can use  mongosh \nto test queries and operations in your database. To open the embedded  mongosh , click  _MONGOSH \nat the bottom of the  MongoDB Compass  window. By default,  mongosh , connects to the  test  database.\nTo use a different database, run the following command in\n mongosh : To run an operation in the embedded MongoDB Shell, type the operation\ninto the shell and press  Enter . The following example runs a  db.collection.find()  operation: To write an operation that spans multiple lines in the embedded\n mongosh , begin with the first line, then press\n Shift + Enter  to move to the next line of code. When you are finished writing your operation, press  Enter \nto run it. The following multi-line example runs the  $match  stage in\nan  aggregation pipeline : The following links direct to the\n mongosh documentation , which contains\nmore a complete reference for  mongosh , including syntax and\nbehaviors. Learn how to  perform CRUD operations  in\n mongosh . Learn how to  run aggregation pipelines \nin  mongosh . See a complete list of  mongosh   methods .",
            "code": [
                {
                    "lang": "sh",
                    "value": "use <database name>"
                },
                {
                    "lang": "sh",
                    "value": "db.employees.find( { \"last_name\": \"Smith\" } )"
                },
                {
                    "lang": "javascript",
                    "value": "db.employees.aggregate( [              // press Shift + Enter\n  { $match: { \"last_name\": \"Smith\" } } // press Shift + Enter\n] )                                    // Press Enter"
                }
            ],
            "preview": "Starting in version 1.22, MongoDB Compass contains an embedded shell,\nmongosh. mongosh is a JavaScript environment for\ninteracting with MongoDB deployments. You can use mongosh\nto test queries and operations in your database.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "",
            "title": "What is MongoDB Compass?",
            "headings": [
                "Visually Explore Your Data",
                "Connect to your deployment",
                "Import your data",
                "Insert documents into your collections",
                "Query your data",
                "Insert documents into your collections",
                "Create aggregation pipelines",
                "Connect to your deployment",
                "Work with your data in the MongoDB Shell",
                "Go Further with Compass"
            ],
            "paragraphs": "MongoDB Compass is a powerful GUI for querying, aggregating, and analyzing your MongoDB data in a visual environment. Compass is free to use and source available, and can be run on macOS, Windows, and Linux. View installation instructions Explore some of the tasks Compass can help you accomplish, such as importing and managing data from an easy-to-navigate interface. Connect to a MongoDB deployment hosted on MongoDB Atlas, or a deployment hosted locally on your own machine. To learn more, see Connect to MongoDB Import data from CSV or JSON files into your MongoDB database. To learn more, see Import and Export Data Paste documents into the JSON view, or manually insert documents using a field-by-field editor. To learn more, see Insert Documents Write ad-hoc queries to filter your data. Explore trends and commonalities in your collections. To learn more, see Query Your Data Insert documents into your collections in two ways, JSON Mode and a Field-by-Field Editor. To learn more, see Insert Documents Write aggregation pipelines that allow documents in a collection or view to pass through multiple stages where they are processed into a set of aggregated results. To learn more, see Aggregation Pipeline Builder Connect to a MongoDB deployment hosted on MongoDB Atlas, or a deployment hosted locally on your own machine. To learn more, see Connect to MongoDB Use the embedded MongoDB Shell in Compass to control your data in an interactive JavaScript environment. To learn more, see Embedded MongoDB Shell Expand your knowledge of MongoDB by using Compass with other MongoDB products. Use Compass to connect to your Atlas cluster Learn MongoDB Basics with MongoDB University Access more in-depth examples of querying data",
            "code": [],
            "preview": "Explore some of the tasks Compass can help you accomplish, such as importing and managing data from an easy-to-navigate interface.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "aggregation-pipeline-builder",
            "title": "Aggregation Pipeline Builder",
            "headings": [
                "Limitations",
                "Create an Aggregation Pipeline",
                "Add an aggregation pipeline stage.",
                "Fill in the pipeline stage.",
                "Add additional pipeline stages.",
                "Run the pipeline.",
                "Edit the pipeline.",
                "Save a Pipeline",
                "Click the save dropdown button",
                "Enter a name for your pipeline",
                "Click Save",
                "Open a Saved Pipeline",
                "Set the Documents Limit or Auto Preview Documents",
                "View or Change Pipeline Settings",
                "Explain Plan for Pipelines",
                "Specify Custom Collation",
                "Export Aggregation Results",
                "Create a View from Pipeline Results",
                "Example",
                "Procedure"
            ],
            "paragraphs": "New in version 1.14.0 The Aggregation Pipeline Builder in  MongoDB Compass  provides the ability to\ncreate  aggregation pipelines  to\nprocess data. In aggregation pipelines, documents in a collection\nor view pass through stages where  MongoDB Compass  processes them into a\nset of aggregated results. You can change the stages and results to\nsuit your needs. To start building an aggregation pipeline for a  collection or view , choose the collection and click the\n Aggregations  tab.\nA blank aggregation pipeline displays. The  Preview of\nDocuments in the Collection  section of the  Aggregations \nview displays 20 documents sampled from the current collection. You can: Create a new aggregation pipeline Save a pipeline Open a saved pipeline Set the documents limit or auto preview documents View or change pipeline settings View the explain plan for pipelines Export Aggregation Results Specify custom collation Create a view from pipeline results Import a pipeline from plain text Export a pipeline to Java, Node, C#, and Python 3 The  $out  stage is not available if you are connected to a\n Data Lake . In the aggregation pipeline pane in the lower-left corner,\nclick the  Select...  dropdown and select the\n aggregation pipeline stage  to use for the first\nstage of the pipeline: Fill in your selected stage. If you enable  Auto Preview ,\npreview documents update automatically to the right of the stage to\nreflect the results of your pipeline as it progresses. You can adjust\nthe width of the pipeline stage by dragging its border to the right. Click  Add Stage  to add additional aggregation stages\nbelow your last aggregation stage.\nRepeat steps 1 and 2 for each additional stage. The toggle to the right of the name of each pipeline stage\ndictates whether that stage is included in the pipeline. Toggling\na pipeline stage also updates the pipeline preview, which reflects\nwhether or not that stage is included. The following pipeline excludes the first\n $match  stage\nand only includes the\n $project \nstage: Click  Run  at the top right of the pipeline builder.\n Compass  returns your results in the document view. When you click  Run , the aggregation runs against the entire\ncollection. Click  Edit  at the top of your pipeline toolbar to return to the\naggregation pipeline builder. You can make changes to your pipeline from\nthere. You can save a pipeline so that you can find it later. If you\nload a saved pipeline, you can change it without\nchanging the original saved copy. You can also create a  view  from your pipeline results. To save your pipeline: Click the  Save  dropdown button at the top of the pipeline\nbuilder. Click on  Save pipeline as... Click the  Folder  icon at the top left of the\npipeline builder. Hover over the pipeline you want to open and click  Open . In the modal, click  Open Pipeline . Starting in  MongoDB Compass  1.31, you can view your saved queries\nand aggregation pipelines on the  My Queries  view\nonce connected to your cluster. To learn more, see\n viewing saved aggregations  for details. Use the toggles at the top of the pipeline builder to set the\nlimit on the number of sampled documents or to enable auto preview. Option Description ( Recommended ) When enabled, limits input documents passed to\n $group ,  $bucket , and\n $bucketAuto  stages. Set the document limit with the\n Limit  setting. When enabled,  Compass  automatically updates the\npreview documents pane to reflect the results of each active\nstage as the pipeline progresses. To view and change pipeline settings: Click the gear icon at the upper right of the pipeline builder to\nopen the  Settings  panel. Change any of the following pipeline settings. Option Description Default When enabled, adds helper comments to each stage. Enabled Number of documents to show in the preview. 20 When  Sample Mode  is enabled, specifies the number of\ndocuments passed to  $group ,  $bucket , and\n $bucketAuto  stages. Lower limits improve pipeline\nrunning time, but may miss documents. 100000 Click  Apply  to save changes and close the\n Settings  panel. Use the  Explain  button to view the explain plan that helps you\nunderstand the performance of your pipelines. You can view the explain plan\nat any point while creating or editing your pipeline. To view your pipeline explain plan, click  Explain  in the\nright corner of your pipeline toolbar. Your results are presented in this format: Use  custom collation  to specify\nlanguage-specific rules for string comparison, such as rules for\nletter case and accent marks. To specify a custom collation: Click  More Options  in the top right corner of the pipeline\nbuilder. Enter your collation document. To export results from your aggregation pipeline: Connect to the deployment containing the\n collection  you wish to export data from. To learn how to connect to a deployment, see\n Connect to MongoDB . Navigate to your target collection. You can either select the collection from the\n Collections  tab or click the collection\nin the left-hand pane. Create an aggregation pipeline and run for results. To learn how to create an aggregation pipeline, see  Create an\nAggregation Pipeline . Click  Export . Choose the appropriate file type. Under  Select Export File Type , select either\n JSON  or  CSV . If you select  JSON ,\nyour data is exported to the target file as an array of JSON objects. Under  Output , choose where to export the file to. Click  Export . To create a view from your pipeline results: Creating a view from pipeline results does not save the pipeline\nitself. Compass  creates a view from your pipeline results in the same\ndatabase where the pipeline was created. Click the arrow next to the  Save  button at the top\nof the pipeline builder. Click  Create a View . Enter a name for your view. Click  Create . In this example, you create and run a pipeline\nfor a collection with airline data. You can download this\ndataset from the following link:\n air_airlines.json . For instructions on importing JSON data into your cluster, see  Import Data\ninto a Collection . This example assumes you have the data in the\n example.air_airlines  namespace. The pipeline returns documents, as shown in the following abbreviated example: Connect to a database deployment. For information on how to connect to a\ndatabase deployment, see  Connect via Compass . Select the  example  database where the  air_airlines  collection\nexists. Create the Pipeline The following pipeline has two aggregation stages:\n $group  and  $match . The  $group  stage groups documents by their\n active  status and  country . The stage also adds\na new  flightCount  field containing the number\nof documents in each group. The  $match  stage filters documents to return documents\nwith a  flightCount  value greater than or equal to  5 . Run the Pipeline. Click  Run  at the top right of the pipeline builder.",
            "code": [],
            "preview": "New in version 1.14.0",
            "tags": null,
            "facets": null
        },
        {
            "slug": "manage-data",
            "title": "Interact with Your Data",
            "headings": [],
            "paragraphs": "MongoDB Atlas \nis a cloud-hosted database-as-a-service that\nprovides free  sample datasets  for your\nclusters. You can use  Compass  to explore and interact with\nthese sample datasets. Learn how to create and manage databases in your deployment. Learn how to manage collections in your databases. Learn how to manage views in your databases. Views are read-only\nresults of an  aggregation  run against\na collection. Learn how to manage documents in your collections. Learn how to query your data to return data that matches a specified\ncriteria. Learn how to create indexes to improve query performance. Learn how to analyze your data schema and shape of the fields in a\nparticular collection. Learn how to ensure that all documents in a collection\nfollow a defined set of rules. Learn how  Compass  samples documents to provide\ninsights about a collection. Learn how to use In-Use Encryption to encrypt data in your collections.",
            "code": [],
            "preview": null,
            "tags": null,
            "facets": null
        },
        {
            "slug": "views",
            "title": "Views",
            "headings": [
                "Collections Screen",
                "View Information",
                "Create a View",
                "Open a View",
                "Duplicate a View",
                "Modify the Source of a View",
                "Drop a View"
            ],
            "paragraphs": "Views are read-only results of an\n aggregation  run against a collection.\nViews provide easy access to the results of an aggregation\nwithout requiring the reader of the view to execute the pipeline.\nViews can also help keep your data secure by only giving users\naccess to a predefined result set,\nas opposed to having access to the underlying collection. Compass  displays views in the  Collections Screen \nwith a special icon, and indicates the collection from which the view\nwas created. The  Collections  screen lists the existing\n collections  and\n views  in the selected database. Each\nlist item includes the name and other general information for\nthe collection or view. To access the  Collections  screen for a database, from the\n Databases screen  either: Click a  Database Name  in the main  Databases \nview, or Click a database in the left navigation. The  Collections  screen displays the following information\nfor each view in the selected database: View name Collection from which the view was created Total size of all documents in the view Total size of all indexes on the collection To create a view, you must use the  Aggregation Pipeline Builder .\nThe output of your pipeline's final stage becomes the content of\nthe view. To create a view from your pipeline results: Compass  creates a view from your pipeline results in the same\ndatabase where the pipeline was created. Create an aggregation pipeline in the pipeline builder. For detailed\ninstructions on using the pipeline builder, see\n Create an Aggregation Pipeline . Click the arrow next to the  Save  button at the top\nof the pipeline builder. Click  Create a View . Enter a name for your view. Click  Create . To open a view, either: After you open a view,  Compass  shows you that\nview's  Documents Tab .  Compass  provides the following\ninformation and functionality for the view: Click the desired view from the\n Collections screen , or Click the desired view in the left-hand navigation. Manage Documents Aggregation Pipeline Builder  to aggregate based on your view View Query Performance Manage Indexes Analyze Your Data Schema Set Validation Rules for Your Schema You can duplicate a view to modify an existing view while retaining the\noriginal. To duplicate a view: Hover over the desired view in the left navigation. Click the appearing  Ellipses (...)  button. In the dropdown, click  Duplicate View . Enter a name for the new view. Click  Duplicate . To modify the source of a view: Views are read-only, and cannot inherently be modified. This\nprocedure describes modifying the  underlying source  of a view. When you modify a view,  Compass  cannot retain collation\ninformation associated with the view. Any collation information\nmust be re-entered in the pipeline builder during modification. Click the desired view in the left navigation. At the top of the view, click  Modify Source . This\nbutton opens the\n aggregation pipeline builder  and\npopulates the pipeline used to create the view. Modify the pipeline as desired. For detailed\ninstructions on using the pipeline builder, see\n Create an Aggregation Pipeline . Click  Update View  at the top of the pipeline builder. To drop a view from the database: Compass  explicitly marks views in the left navigation with\na unique icon: Hover over the desired view in the left navigation. Click the appearing  Ellipses (...)  button. In the dropdown, click  Drop View . In the modal, enter the name of the view. Click  Drop Collection .",
            "code": [],
            "preview": "Views are read-only results of an\naggregation run against a collection.\nViews provide easy access to the results of an aggregation\nwithout requiring the reader of the view to execute the pipeline.\nViews can also help keep your data secure by only giving users\naccess to a predefined result set,\nas opposed to having access to the underlying collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "databases",
            "title": "Databases",
            "headings": [
                "Databases Tab",
                "Create a Database",
                "Click the Create Database button.",
                "Enter database and first collection information.",
                "Click Create Database to create the database and its first collection.",
                "Drop a Database",
                "Click the trash can icon for the database.",
                "Confirm the database to delete.",
                "Click Drop Database to delete the database.",
                "Limitations"
            ],
            "paragraphs": "A database is a container for  collections .\nEach database gets its own set of files on the host file system.\nA single MongoDB server typically has multiple databases. The  Databases  tab lists the existing databases for your\nMongoDB deployment. To access the  Databases  tab, click the\ncluster name in the upper left corner and select the\n Databases  tab. From this view, you can click a database name in the list to view its\n collections . Alternatively, you can view\ndatabase collections by clicking the desired database in the left-hand navigation. You can also  create  or\n drop databases  from this view. From the  Databases  tab, click the\n Create Database  button to bring up the\n Create Database  dialog. In the dialog, enter the name of the database to create and its\nfirst collection. Both the database name and the collection name are\nrequired. If you want to create a  capped collection ,\nselect the  Capped Collection  checkbox and enter the maximum bytes. If you want to use  custom collation  on the collection,\nselect the  Use Custom Collation  checkbox and select the\ndesired collation settings. If your deployment is connected using  In-Use Encryption , you can\nuse  Queryable Encryption  on the newly\ncreated collection. Check the  Queryable Encryption  option\nand indicate the following encryption properties: Encrypted Fields . (Optional)  KMS Provider . (Optional)  Key Encryption Key . From the  Databases  tab, to delete a\ndatabase, click on the trash can icon for that database. A\nconfirmation dialog appears. In the dialog, enter the name of the database to delete. Creating and dropping databases is not permitted in  MongoDB Compass Readonly Edition . Creating databases is not permitted if you are connected to a\n Data Lake .",
            "code": [],
            "preview": "A database is a container for collections.\nEach database gets its own set of files on the host file system.\nA single MongoDB server typically has multiple databases.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "export-pipeline-to-language",
            "title": "Export Pipeline to Specific Language",
            "headings": [
                "Procedure",
                "Open the Aggregation Pipeline Builder for the desired collection.",
                "Create a new pipeline or open an existing one.",
                "Click the Export button.",
                "Select your desired export language.",
                "Optional: Include import statements, if desired.",
                "Optional: Include driver syntax, if desired.",
                "Click .",
                "Click Close."
            ],
            "paragraphs": "New in version 1.15.0 You can use the  Aggregation Pipeline Builder  to export your finished pipeline to one of the\nsupported languages; Java, Node, C#, and Python 3. This feature\nfacilitates formatting and exporting pipelines created in  MongoDB Compass  for\nuse in your applications. Navigate to the collection for which you wish to export your\naggregation pipeline. Click the  Aggregations  tab. For instructions on creating an aggregation pipeline in\n MongoDB Compass , see  Aggregation Pipeline Builder . In the  Export Pipeline To:  dropdown, select your desired\nprogramming language: The  My Pipeline  pane on the left displays your\npipeline in  mongo shell  syntax. The pane to the right displays your pipeline in the selected\nprogramming language. Check the  Include Import Statements  option\nto include the required import statements for the selected programming language. Check the  Include Driver Syntax  option to include\napplication code for the selected programming language. If you\ninclude driver syntax, the copyable code reflects  project ,  sort ,  maxtimems ,  collation ,\n skip  and  limit \noptions. Click   at the top-right of the pipeline to copy\nthe pipeline for the selected programming language to your clipboard.\nYou can now integrate and execute your created pipeline into your\napplication. Aggregation Pipeline Builder",
            "code": [],
            "preview": "New in version 1.15.0",
            "tags": null,
            "facets": null
        },
        {
            "slug": "learn-more",
            "title": "Resources to Learn and Explore MongoDB",
            "headings": [
                "Free MongoDB Courses Online",
                "Free MongoDB Cluster for Learning and Testing",
                "MongoDB Server Installation",
                "Resources and Documentation",
                "MongoDB Community Forums",
                "MongoDB User Groups"
            ],
            "paragraphs": "The following sections outline methods to learn MongoDB basics and\nbest practices. To help you get started with MongoDB Compass and the MongoDB database,\nsee the MongoDB University course  M001 .  This course\nprovides access to a student cluster for learning about MongoDB. If you are looking to learn more about MongoDB technologies, there are\nother available courses to help you along the way.  All courses are\navailable at no charge.  In the course catalog, you will find courses\non: Development in  Java ,  Node.js ,  Python , New features and tools available  in the latest\nversion of MongoDB, Cluster administration , Aggregation , Performance ,\nand more. If you would like to use a hosted instance of MongoDB rather than set up\na local server, you can set up a free  M0  cluster on  Atlas , MongoDB's hosted database as a\nservice. The  M0  tier cluster is ideal for learning and testing. Once the cluster is set up, you can use the  Connect  button\nin the Atlas interface to obtain the correct Compass connection\nsettings for your cluster. Fill in the Compass connection form with your\nsettings to  connect to your cluster . To install and run MongoDB using your own network services, you can use\nthe following tutorials to get a MongoDB database server up and running: Install MongoDB Enterprise on Windows Install MongoDB Enterprise on Linux Install MongoDB Enterprise on macOS Resource Description MongoDB Architecture Guide Starting point to get an overview of the MongoDB database. MongoDB Blog Provides timely updates on new products, features and best\npractices for getting the most out of the MongoDB platform. Resource Center Contains presentations, white papers and webinars covering all\naspects of the MongoDB database and associated products. Database Server Documentation Contains information about installing, configuring and\nmaintaining the database, as well as in depth information on the\nquery language. The MongoDB Community Forums   is a\ncentral place to connect with other MongoDB users in your community,\nask questions, and get answers. MongoDB User Groups (MUGs) are local communities of developers who work\ntogether to learn from one another about MongoDB best practices,\nnetwork, and have fun. To find a MongoDB User Group in your area, see\n MongoDB User Groups on MeetUp .",
            "code": [],
            "preview": "The following sections outline methods to learn MongoDB basics and\nbest practices.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "import-pipeline-from-text",
            "title": "Import Pipeline from Text",
            "headings": [
                "Syntax",
                "Procedure",
                "Open the Aggregation Pipeline Builder for the desired collection.",
                "Open the New Pipeline From Plain Text dialog.",
                "Enter your pipeline in the dialog.",
                "Click Create New.",
                "Click Confirm to import your pipeline."
            ],
            "paragraphs": "New in version 1.15.0 You can import aggregation pipelines from plain text into\nthe  Aggregation Pipeline Builder  to\neasily modify and execute your pipelines. Importing a plain text\naggregation pipeline shows how each stage of the pipeline\naffects the output, and illustrates the effects of modifying specific\npipeline stages using the Pipeline Builder's  Output  panes. The imported pipeline must be in the\n MongoDB query language \n(i.e. the same syntax used as the  pipeline  parameter of the\n db.collection.aggregate()  method). The imported\npipeline must be an array, even if there is only one stage in the\npipeline. Once you import your pipeline, you can add and modify individual stages\nand see the results reflected in the  Output  of each respective stage. Navigate to the collection for which you wish to import your\naggregation pipeline. Click the  Aggregations  tab. Click the arrow next to the  \nicon at the top of the pipeline builder. Click  New Pipeline From Text . If you have a pre-written pipeline you wish to import into\nthe Aggregation Pipeline Builder, copy it to your clipboard and\npaste it into the  New Pipeline from Plain Text \ndialog. Otherwise, type your pipeline in the input.",
            "code": [],
            "preview": "New in version 1.15.0",
            "tags": null,
            "facets": null
        },
        {
            "slug": "performance",
            "title": "Performance",
            "headings": [
                "Performance Tab",
                "Server Stats",
                "Kill Slow Operations",
                "Pause the Display",
                "Limitation"
            ],
            "paragraphs": "To access the real-time server performance view, click the\ncluster name in the upper left corner and select the\n Performance  tab. The  Performance  tab displays various stats: Chart/Table Description Operations Displays the number of operations as reported by\n mongostat . For a description of the\nfields, see  mongostat . Read & Write Displays the number of active reads, queued reads, active\nwrites, queued writes as reported by  mongostat . For a description of the fields, see\n mongostat . Network Displays the number of connections as reported by\n mongostat . For a description of the\nfields, see  mongostat . Memory Displays the memory stats as reported by  mongostat . For a description of the fields, see\n mongostat . Hottest Collections Displays the collections with the most activities as reported\nby  mongotop . The collections correspond to a given moment in the charts;\ni.e. as you move over the charts, the corresponding collections\nare highlighted/displayed in the table. Slowest Operations Displays the slowest operations as reported by\n db.currentOp() . The\noperations correspond to a given moment in the charts; i.e. as\nyou move over the charts, the corresponding slowest operations\nare displayed in the table. To view the details of a slow\noperation or  kill the operation , click on\nthe operation. You can kill slow operations from the  Performance Tab . On deployments which require\n authentication , to kill operations\nnot owned by the user, the user must have access that includes the\n killop  privilege action. Click the query you would like to kill in the\n Slowest Operations  section. In the  Operation Details  view, click\n Kill Op . The  Pause  button above the graph display pauses the update\nof the displays only. Pausing the performance tab does not impact the\ncollection of the underlying data. To restart the display updates, click\n Play . Next to the  Pause  button is a clock which shows the\ncurrent time while the graphs are updating. If the display is\npaused, the clock shows the time at which the pause began. The  Performance  tab is not available if you are connected\nto a  Data Lake .",
            "code": [],
            "preview": "To access the real-time server performance view, click the\ncluster name in the upper left corner and select the\nPerformance tab.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "documents/clone",
            "title": "Clone Documents",
            "headings": [],
            "paragraphs": "You can insert new documents by cloning the schema and values of\nan existing document in a collection. Select the appropriate tab based on whether you are viewing your\ndocuments in List, JSON, or Table view: When you click the  Clone  button,  Compass  opens the\ndocument insertion dialog with the same schema and values as the cloned\ndocument. You can edit any of these fields and values before you insert\nthe new document. To learn more about inserting documents, see\n Insert Documents . Cloning documents is not permitted in\n MongoDB Compass Readonly Edition . To clone a document, hover over the desired document\nand click the  Clone  button. To clone a document, hover over the desired document\nand click the  Clone  button. JSON View is available starting in Compass 1.20. To clone a document, hover over the desired document\nand click the  Clone  button.",
            "code": [],
            "preview": "You can insert new documents by cloning the schema and values of\nan existing document in a collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "upgrade",
            "title": "Update MongoDB Compass",
            "headings": [
                "Manually Install the Latest Version of Compass",
                "Enable Automatic Updates",
                "Allow Keychain Access for Recent and Favorite Connections",
                "Migrate to Compass from Compass Community",
                "Procedure"
            ],
            "paragraphs": "To ensure that you are using the latest  Compass  features and\nimprovements, it is recommended to use the latest version of\n MongoDB Compass . To upgrade  Compass , you can either\nmanually install the latest version or enable automatic updates. You can download and install the latest version of Compass from the\n MongoDB Downloads  page at\nany time. Check the  Software Requirements  for\nyour operating system and desired version of Compass to ensure Compass\nis compatible with your system. You do not need to uninstall previous\nversions of Compass to upgrade. If you are running macOS Catalina or later, you may have to modify\nyour system settings to grant  Compass  permission to run. For\nmore information, see  Install Compass . You can enable automatic updates to the latest version of Compass on the\n Help > Privacy Settings  dialog. MongoDB Compass  does not install any updates without your explicit permission.\nInstead,  Compass  prompts you to upgrade when a new version is\navailable. On macOS systems, the first time that you update  MongoDB Compass  to version\n1.20 or later, you will need to allow access to your system storage\n for each  saved connection in  Recents  and\n Favorites . When prompted for your keychain password, click  Always Allow \nto prevent being prompted for your password in the future. This\nensures  MongoDB Compass  has access to your saved connections when updating\nto new versions. To migrate from Compass Community edition to the fully-featured\nedition of Compass and retain any saved data such as saved connection\nstrings and favorite queries, you must migrate that data to your\nnew edition of  MongoDB Compass . MongoDB Compass  stores saved connections, queries, and aggregation pipelines\nin folders in your file system. You can copy these folders to the\ncorresponding folder for your upgraded Compass version to avoid\nrecreating your saved data. Download the fully-featured edition of  MongoDB Compass  from the\n downloads page . Refer to the following table to see where your  MongoDB Compass  data\nis stored based on your operating system: Operating System Data Location macOS ~/Library/Application Support/MongoDB Compass Community Windows %APPDATA%/MongoDB Compass Community Linux One of either: $XDG_CONFIG_HOME/MongoDB Compass Community/ ~/.config/MongoDB Compass Community Copy the following folders from your Compass Community edition folder\nto your fully-featured Compass folder: The fully-featured Compass folder is located in the same directory\nas your Compass Community edition folder. Connections FavoriteQueries RecentQueries SavedPipelines Launch the fully-featured edition of  MongoDB Compass . Download and Install Compass",
            "code": [],
            "preview": "To ensure that you are using the latest Compass features and\nimprovements, it is recommended to use the latest version of\nMongoDB Compass. To upgrade Compass, you can either\nmanually install the latest version or enable automatic updates.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "documents/modify",
            "title": "Modify Documents",
            "headings": [
                "Limitations",
                "Procedure",
                "Delete Fields",
                "Add New Fields",
                "Modify an Existing Field",
                "Save Changes",
                "Revert a Change",
                "Delete Fields",
                "Add New Fields",
                "Revert a Change",
                "Cancel Changes"
            ],
            "paragraphs": "You can edit existing documents in your collection. When you edit a document in List or Table view,  Compass  performs a\n findOneAndUpdate \noperation and updates only those fields that you have\nchanged. When you edit a document in JSON view,  Compass  performs a\n findOneAndReplace \noperation and replaces the document. Modifying documents is not permitted in\n MongoDB Compass Readonly Edition . Select the appropriate tab based on whether you are viewing your\ndocuments in List, JSON, or Table view: To modify a document, hover over the document and click the pencil\nicon: After you click the pencil icon, the document enters edit mode: You can now make changes to the fields, values, or data types\nof values. To delete a field from a document, click the  x  icon to the\nleft of the field: Once selected, the field is marked for removal and appears\nhighlighted in red: To add a new field in the document after an existing field, hover\nover the row number in the dialog and click on the plus sign. The\nrow number is not part of the document but is part of the dialog display. You can also add a new field at the end of the document by\npressing the tab key when your text cursor is in the value of the\nlast document field. To modify documents, click on existing field names or\nvalues and make changes. In this example, the flight status was\nchanged from  L  to  M . Changed fields appear highlighted in\nyellow: When you edit a document in List or Table view,  Compass  performs a\n findOneAndUpdate \noperation and updates only those fields that you have\nchanged. If  Compass  detects that you have changed fields\nthat were modified outside of  Compass , it notifies you, preventing\nyou from accidentally overwriting the changes made outside of  Compass .\nYou can choose to proceed and replace the document by clicking  Update ,\nor cancel your changes. When you are finished editing the document, click the  Update \nbutton to commit your changes. To revert changes to a document, hover over the edited field\nand click the  revert icon  which appears to the left\nof the field's line number. To modify a document, hover over the document and click the pencil\nicon: After you click the pencil icon, the document enters edit mode.\nYou can now add, remove, and edit field values by modifying\nthe JSON document. By default, this view hides embedded objects and arrays. To expand\nembedded objects and array elements, hover over the target\ndocument and click the top arrow on the left side of the document. To expand individual objects and arrays, click the arrow to\nthe left of the desired field. JSON View is available starting in Compass 1.20. When you edit a document in JSON view,  Compass  performs a\n findOneAndReplace \noperation and replaces the document. If  Compass  detects that you have changed fields\nthat were modified outside of  Compass , it notifies you, preventing\nyou from accidentally overwriting the changes made outside of  Compass .\nYou can choose to proceed and replace the document by clicking  Update ,\nor cancel your changes. To modify a document, hover over the document and click the pencil\nicon: After you click the pencil icon, the document enters edit mode: When you edit a document in List or Table view,  Compass  performs a\n findOneAndUpdate \noperation and updates only those fields that you have\nchanged. If  Compass  detects that you have changed fields\nthat were modified outside of  Compass , it notifies you, preventing\nyou from accidentally overwriting the changes made outside of  Compass .\nYou can choose to proceed and replace the document by clicking  Update ,\nor cancel your changes. To delete a field from a document: Click the value of the field you want to delete. Click the   icon. Click  Update  to confirm your changes. To add a new field to the document: Click the field after which you wish to add the new field. Click the   icon. Click  Add Field after <Field Name> . Populate your newly created field. Click  Update  to confirm your changes. While modifying a document, you have the option to revert changes\nmade to a field prior to saving the modified document. Click the  revert icon  which appears on the\nright side of the edited table element. To exit the edit mode and cancel all pending changes to the document,\nclick the  Cancel  button.",
            "code": [],
            "preview": "You can edit existing documents in your collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "documents/insert",
            "title": "Insert Documents",
            "headings": [
                "Procedure",
                "Add New Fields",
                "Change Field Type",
                "Limitation"
            ],
            "paragraphs": "Compass  provides two ways to insert documents into your\ncollections: JSON Mode and a Field-by-Field Editor. Inserting documents is not permitted in\n MongoDB Compass Readonly Edition . Allows you to write or paste JSON documents in the editor. Use\nthis mode to insert multiple documents at once as an array. Provides a more interactive experience to create documents, allowing\nyou to select individual field values and types. This mode only\nsupports inserting one document at a time. To insert documents into your collection: Click the  Add Data  dropdown and select\n Insert Document . Select the appropriate view based on how you would like to\ninsert documents. Click the  { }  brackets for JSON view. This is the default\nview. Click the list icon for Field-by-Field mode. In JSON format, type or paste the document(s) you want to\ninsert into the collection. To insert multiple documents,\nenter a comma-separated array of JSON documents. The following array inserts 5 documents into\nthe collection: If you do not provide an\n ObjectId  in your document,\n Compass  automatically generates an ObjectId. Click  Insert . For each field in the document, select field type and fill\nin the field name and value. If you do not provide an\n ObjectId  in your document,\n Compass  automatically generates an ObjectId. To add a new field in the document, hover over the row number\nin the dialog (the row number is not part of the document but\nthe dialog display) and click the   icon to\nadd a new field after the selected row. You can also add a new field at the end of the document by\npressing the tab key when your text cursor is in the value of\nthe last document field. You can change the data type of a field by using the data\ntype selectors on the right of the field. To change the  _id  field to use a custom value, change the\ndata type from  ObjectID  to  string  and then overwrite\nthe  _id  value: Click  Insert . The  Insert Document  button is not available if you are connected\nto a  Data Lake .",
            "code": [
                {
                    "lang": "json",
                    "value": "[\n  { \"_id\" : 8752, \"title\" : \"Divine Comedy\", \"author\" : \"Dante\", \"copies\" : 1 },\n  { \"_id\" : 7000, \"title\" : \"The Odyssey\", \"author\" : \"Homer\", \"copies\" : 10 },\n  { \"_id\" : 7020, \"title\" : \"Iliad\", \"author\" : \"Homer\", \"copies\" : 10 },\n  { \"_id\" : 8645, \"title\" : \"Eclogues\", \"author\" : \"Dante\", \"copies\" : 2 },\n  { \"_id\" : 8751, \"title\" : \"The Banquet\", \"author\" : \"Dante\", \"copies\" : 2 }\n]"
                }
            ],
            "preview": "Compass provides two ways to insert documents into your\ncollections: JSON Mode and a Field-by-Field Editor.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/favorite-connections",
            "title": "Favorite Connections",
            "headings": [
                "Save a Favorite Connection",
                "Save from Connect Screen",
                "Configure your connection form with a connection you would like to save.",
                "Click Favorite at the top of the form.",
                "Enter a name for this favorite connection.",
                "(Optional) Select a color for your favorite to more easily identify the favorite connection.",
                "Click Save.",
                "Save after Connecting to a Deployment",
                "Click Favorite on the left navigation panel.",
                "Enter a name for this favorite connection.",
                "(Optional) Select a color for your favorite to more easily identify the favorite connection.",
                "Click Save.",
                "Edit a Favorite Connection",
                "Click the desired connection under Favorites in the left navigation panel.",
                "Make the desired changes to the connection configuration within the form.",
                "Click Save Changes.",
                "Delete a Favorite Connection",
                "Click the desired connection under Favorites in the left navigation panel.",
                "Click the  button on the connection.",
                "Click Remove from the dropdown menu.",
                "Considerations"
            ],
            "paragraphs": "Compass  allows you to save MongoDB connection configurations to\neasily reconnect to the same MongoDB deployment using the same\nspecifications. You can save a favorite connection from the initial\n connect screen , or after you have\nsuccessfully connected to a MongoDB deployment. To  Copy  or  Remove  a Favorite Connection,\nhover over the target connection and click the  \nbutton. Copying a connection creates another Favorite Connection with the\nsame configuration. Removing a connection deletes that Favorite Connection. When you make any change to a connection, a dialog will appear at the\nbottom of the form with options  Discard  and\n Save Changes . Compass  displays a dropdown menu with options\n Copy  and  Remove . Compass  removes the connection from the  Favorites \nlist and returns the  New Connection  form to the default\nstate. On macOS systems, the first time that you update  MongoDB Compass  to version\n1.20 or later, you will need to allow access to your system storage\n for each  saved connection in  Recents  and\n Favorites . To learn more, see  Allow Keychain Access for Recent and Favorite Connections . If you run  MongoDB Compass  on KDE Linux, you must have GNOME Keyring\ninstalled to successfully load saved connections. The Electron module\n Keytar  uses GNOME Keyring\nto securely store the database credentials for your connections.",
            "code": [],
            "preview": "Compass allows you to save MongoDB connection configurations to\neasily reconnect to the same MongoDB deployment using the same\nspecifications.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/disconnect",
            "title": "Disconnect from MongoDB",
            "headings": [
                "Click Connect in the menu bar.",
                "Select Disconnect from the dropdown menu."
            ],
            "paragraphs": "Disconnecting from a MongoDB deployment closes the Compass connection to\nthe active deployment and returns the Compass view to the initial\nconnection dialog. To disconnect from a MongoDB deployment: To create a new connection, see  Connect to MongoDB .",
            "code": [],
            "preview": "Disconnecting from a MongoDB deployment closes the Compass connection to\nthe active deployment and returns the Compass view to the initial\nconnection dialog.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/ssh-connection",
            "title": "Proxy / SSH Tunnel Connection Tab",
            "headings": [
                "Procedure",
                "Click Advanced Connection Options.",
                "Click the Proxy / SSH Tunnel tab.",
                "SSH Connection",
                "Behavior",
                "Socks5",
                "Behavior",
                "(Optional) For advanced connection configuration options, click the Advanced tab.",
                "Click Connect."
            ],
            "paragraphs": "The  Proxy / SSH Tunnel  tab allows you to connect to your deployment using\na Proxy method or SSH Tunnel. You have the following connection options: Option Description SSH with Password Connects to a deployment using a SSH Tunnel and has the option to secure\nthe connection with a password. For information on SSH connections and\nthe fields for this connection option, see  SSH Connection . SSH with Identity File Connects to a deployment using a SSH Tunnel and uses an Identity File\nto secure the connection. For information on SSH connections and\nthe fields for this connection option, see  SSH Connection . Socks5 Connects to a deployment using a seperate proxy server. For more\ninformation on the fields for this connection option, see\n Socks5 . To connect to a deployment using  SSH with Password  or\n SSH with Identity File , use the following fields: Field Description SSH Hostname Bastion (jumpbox) hostname. This is the unique identifier\n(Fully Qualified Domain Name, or FQDN) for the computer to access. SSH Port Port used for the SSH connection. This defaults to 22,\nthe standard port for SSH. SSH Username This is the user for which the profile to log into on the remote\nsystem. This is the user for which you want to establish the\nSSH connection. SSH Password (Optional) Password used to secure the SSH connection. This is\nrequired if you are not using an identity file. SSH Identity File File from which the identity (private key) for SSH public\nkey authentication is read. Unix or OS X: If using OpenSSH, identity files are found in the  ~/.ssh \ndirectory. By default, the private key files have one of the following\nfile names: On Windows, the location of the identity files depends on your choice\nof SSH client, such as PuTTY. id_dsa id_ecdsa id_ed25519 id_rsa SSH Passphrase (Optional) If your private key is encrypted, provide the passphrase\nused to decrypt your private key. A passphrase provides an extra\nlayer of security for an SSH connection. In  MongoDB Compass ,  SSH Tunnel Connections  allow users to connect\nto replica sets. Users can connect to replica sets using SSH Tunnels and\n TLS / SSL connections . To connect to a deployment using  Socks5 , use the following\nfields: Field Description Proxy Hostname Domain name, IPv4, or IPv6 address on which a socks5 proxy is listening. Proxy Tunnel Port (Optional) TCP port number. Default is 1080. Proxy Username (Optional) Username used to authenticate the connection with the proxy\nserver. Proxy Password (Optional) Password used to authenticate the connection with the\nproxy server. If you specify a non-local Socks5 proxy host and provide a\nusername and password authentication, you receive a warning\nstating that the credentials will be sent in plaintext. If you specify a remote Socks5 proxy host and do not enable TLS,\nyou receive a warning stating that the proxy administrator will\nbe able to intercept data sent and received by  Compass . To disconnect from your deployment, see  Disconnect from MongoDB .",
            "code": [],
            "preview": "The Proxy / SSH Tunnel tab allows you to connect to your deployment using\na Proxy method or SSH Tunnel.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "documents/view",
            "title": "View Documents",
            "headings": [
                "Expand Embedded Objects and Arrays",
                "Copy Documents to Clipboard",
                "Encrypted Fields"
            ],
            "paragraphs": "The Documents tab provides three ways to access documents: Use the  View  buttons to select which view you would like\nto use: The default document view. Documents are shown as individual members\nof a list. In this view you can easily expand embedded objects\nand arrays. Documents are shown as properly-formatted JSON objects. In this view\n Compass  uses extended JSON to display the data types of\nfields where appropriate. Shows documents as rows of a table, with document fields\nshown in the table columns. With this view, you can more easily\nsee which documents contain specific field values. JSON View is available starting in Compass 1.20. You can reorder the table columns by clicking and dragging the\ncolumn headings. Reordering the columns is a strictly cosmetic\nchange and does not change the underlying data itself. To toggle the expansion of embedded objects and array elements, hover over the target document and click the arrow in\nthe top-left corner. To toggle the expansion of embedded objects and array elements,\nhover over the target document and click the top arrow on the\nleft side of the document. To expand individual objects and arrays, click the arrow to\nthe left of the desired field. To view nested object fields and array elements, hover your cursor\nover a field with a value type of  Object  or  Array  and\nclick the button with outward-pointing arrows which appears on the\nright side of the field. Compass  opens a new tab in the Table View corresponding\nto the nested element. The following example displays the  delays \nobject nested within the  flightStats  collection documents. The\nnew tab displays the two properties of the  delay  object:\n arrivalRunwayDelayMinutes  and  departureRunwayDelayMinutes . To return to the original table display, click on the first tab\nin the Table View which displays the name of your collection. To copy a document to your clipboard, hover over the document\nand click the  Copy  icon: To copy a document to your clipboard, hover over the document\nand click the  Copy  icon: To copy a document to your clipboard, hover over the document\nand click the  Copy  icon: Compass  obscures document fields encrypted with Field-Level\nEncryption (FLE).  Compass  displays the values of these fields\nas a series of asterisks. If your deployment is connected using  In-Use Encryption  and your\ncollection is configured with  Queryable Encryption ,\nyou can toggle the  In-Use Encryption  connection\noption. When  In-Use Encryption  is enabled, you can modify and view\nthe encrypted values and fields. When  In-Use Encryption  is disabled,  Compass  displays the\nvalues of these fields as a series of asterisks. Compass  obscures document fields encrypted with Field-Level\nEncryption (FLE).  Compass  displays the values of these fields\nas a series of asterisks. If your deployment is connected using  In-Use Encryption  and your\ncollection is configured with  Queryable Encryption ,\nyou can toggle the  In-Use Encryption  connection\noption. When  In-Use Encryption  is enabled, you can modify and view\nthe encrypted values and fields. When  In-Use Encryption  is disabled,  Compass  displays the\nvalues of these fields as a series of asterisks. Compass  obscures document fields encrypted with Field-Level\nEncryption (FLE).  Compass  displays the values of these fields\nas a series of asterisks. If your deployment is connected using  In-Use Encryption  and your\ncollection is configured with  Queryable Encryption ,\nyou can toggle the  In-Use Encryption  connection\noption. When  In-Use Encryption  is enabled, you can modify and view\nthe encrypted values and fields. When  In-Use Encryption  is disabled,  Compass  displays the\nvalues of these fields as a series of asterisks.",
            "code": [],
            "preview": "The Documents tab provides three ways to access documents:",
            "tags": null,
            "facets": null
        },
        {
            "slug": "documents/delete",
            "title": "Delete Documents",
            "headings": [
                "Delete Multiple Documents"
            ],
            "paragraphs": "Select the appropriate tab based on whether you are viewing your\ndocuments in List, JSON, or Table view: Once you confirm, Compass deletes the document from the collection. Deleting documents is not permitted in\n MongoDB Compass Readonly Edition . To delete a document, hover over the document and click the\n  icon. After you click the delete button, the document is flagged for deletion.\n Compass  asks for confirmation that you want to remove the document: To delete a document, hover over the document and click the\n  icon. After you click the delete button, the document is flagged for deletion.\n Compass  asks for confirmation that you want to remove the document: JSON View is available starting in Compass 1.20. To delete a document, hover over the document and click the\n  icon. After you click the delete button, the document is flagged for deletion.\n Compass  asks for confirmation that you want to remove the document: You cannot delete multiple documents at once from the  Compass \n UI (User Interface) . As an alternative, you can use the\n db.collection.deleteMany()  method in the\n embedded MongoDB Shell  to delete\nmultiple documents in a single operation.",
            "code": [],
            "preview": "Select the appropriate tab based on whether you are viewing your\ndocuments in List, JSON, or Table view:",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/advanced-connection",
            "title": "Advanced Connection Tab",
            "headings": [
                "Procedure",
                "Click Advanced Connection Options.",
                "Click the Advanced tab.",
                "Additional Optional Fields",
                "Click Connect."
            ],
            "paragraphs": "The  Advanced  connection tab provides additional connection options\nfor your deployment. These options can be used with the\n General ,  Authentication ,  TLS / SSL , and\n Proxy / SSH Tunnel  connection options. (Optional) Select a  Read Preference  from the following\noptions: Read Preference Description Primary Default mode. All operations read from the current replica set primary.\nIf the primary is unavailable, the operation fails. Primary Preferred Operations read from the primary unless the primary is unavailable.\nIf the primary is unavailable, operations read from secondary members. Secondary All operations read from the secondary members of the replica set.\nIf the secondary is unavailable, the operation fails. Secondary Preferred Operations read from the secondary unless the secondary is unavailable.\nIf the secondary is unavailable, operations read from the primary\non sharded clusters. Nearest Operations read from a random eligible replica set member,\nirrespective of whether that member is a primary or secondary, based\non a specified latency threshold. The operation considers the following\nwhen calculating latency: The  localThresholdMS \nconnection string option. The  maxStalenessSeconds \nread preference option. Any specified tag sets. Read Preferrence . Read Preferrence Use Cases . Field Description Replica Set Name (Optional) Name of replica set. Default Authentication Database (Optional) Authentication database used when authSource is not specified.\nFor more information, see  Authentication Options . URI Options Additional options to customize your connection. You\nspecify these options as key-value pairs, and  Compass \nautomatically adds the key-value pairs to the connection string.\nFor more information, see  Connection String Options . To disconnect from your deployment, see  Disconnect from MongoDB .",
            "code": [],
            "preview": "The Advanced connection tab provides additional connection options\nfor your deployment. These options can be used with the\nGeneral, Authentication, TLS / SSL, and\nProxy / SSH Tunnel connection options.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/general-connection",
            "title": "General Connection Tab",
            "headings": [
                "Procedure",
                "Click Advanced Connection Options.",
                "Click the General tab.",
                "Select a Connection String Scheme.",
                "Enter a Hostname.",
                "(Optional) Enable Direct Connection.",
                "(Optional) For advanced connection configuration options, click the Advanced tab.",
                "Click Connect."
            ],
            "paragraphs": "The  General  connection tab allows you to select a\n Connection String Scheme  and configure the hostname or hosts\nused to connect to your MongoDB deployment. You can select one of the following options: Connection String Scheme Definition mongodb Standard Connection String Format .\nThe standard format of the MongoDB connection URI is used to\nconnect to a MongoDB deployment by specifying its hosts directly. mongodb+srv DNS Seed List Connection Format .\nThe  +srv  indicates to  MongoDB Compass  that the hostname that follows\ncorresponds to a DNS SRV record. In the  Host  field, enter the hosts or hostname of the server\nwhere the deployment is running. If you are running your deployment locally, this value is  localhost .\nIf you are connecting to an Atlas cluster, see\n Connect to Database Deployment \nfor Atlas-specific guidance on how to connect with  Compass . If you are not sure of your hostname, contact your Database\nAdministrator for information. When you use the  mongodb  Connection String Scheme, you have the\noption to enable a  Direct Connection . When you\nenable this setting,  Compass  runs all operations on the specified\nhost. When you specify  directConnection  and connect to a secondary member\nof a replica set, your write operations fail because it is not the\nprimary member. To disconnect from your deployment, see  Disconnect from MongoDB .",
            "code": [],
            "preview": "The General connection tab allows you to select a\nConnection String Scheme and configure the hostname or hosts\nused to connect to your MongoDB deployment.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/tls-ssl-connection",
            "title": "TLS / SSL Connection Tab",
            "headings": [
                "Procedure",
                "Click Advanced Connection Options.",
                "Click the TLS / SSL tab.",
                "Additional TLS / SSL Options",
                "(Optional) For advanced connection configuration options, click the Advanced tab.",
                "Click Connect."
            ],
            "paragraphs": "The  TLS / SSL  tab allows you to connect deployments using TLS / SSL.\nFor more information on  TLS / SSL , see  TLS Options You can leave TLS unset with the  Default  option or set the TLS / SSL\nconnection  On  or  Off . Option Description Default The  Default  option leaves the TLS option  unset . The\n Default / unset  TLS /SSL option is enabled when using a\n DNS seedlist\n(SRV) \nin the connection string. To learn more about the additional options\navailable, see  Additional TLS / SSL Options . On Select the  On  option when using a DNS seedlist (SRV) in the\nconnection string. When TLS / SSL Connection is  On , you can\nspecify additional certificate options for your connection string.\nTo see more on the additional certificate options available, see\n Additional TLS / SSL Options . Off The  Off  option initiates a connection  without \nTLS / SSL. It is recommended that users enable TLS / SSL to avoid security\nvulnerabilities. When TLS is  On  you can specify the following: Option Description Certificate Authority One or more certificate files from trusted Certificate Authorities\nto validate the certificate provided by the deployment. Client Certificate Specifies the location of a local .pem file that contains either\nthe client's TLS/SSL X.509 certificate or the client's TLS/SSL\ncertificate and key. Client Key Password If the  Client Private Key  is protected with a password,\nyou must provide the password. tlsInsecure Disables various certificate validations. tlsAllowInvalidHostnames Disables hostname validation of the certificate presented by\nthe the deployment. tlsAllowInvalidCertificates Disable the validation of the server certificates. Enabling  tlsInsecure ,  tlsAllowInvalidHostnames , and\n tlsAllowInvalidCertificates  may cause a security vulnerabilty. To disconnect from your deployment, see  Disconnect from MongoDB .",
            "code": [],
            "preview": "The TLS / SSL tab allows you to connect deployments using TLS / SSL.\nFor more information on TLS / SSL, see TLS Options",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/favorite-connections/import-export-cli",
            "title": "Export and Import Favorite Connections with the CLI",
            "headings": [
                "Tasks"
            ],
            "paragraphs": "To quickly connect to a shared deployment, export and share your\nfavorite connections. Colleagues can import your favorites, or you can\nuse them yourself in your other workspaces. By default, when you export favorite connections, database usernames\nand passwords are included in plaintext. To protect sensitive\nconnection information, you may  encrypt the exported file with\na passphrase . When you\ndo, users must specify the matching passphrase to import the\nconnections. To learn how to export and import favorite connections, see: Export Favorite Connections with the CLI Import Favorite Connections with the CLI",
            "code": [],
            "preview": "To quickly connect to a shared deployment, export and share your\nfavorite connections. Colleagues can import your favorites, or you can\nuse them yourself in your other workspaces.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/required-access",
            "title": "Required Access",
            "headings": [],
            "paragraphs": "MongoDB Compass  users require specific privileges to access various\n Compass  features if authentication/authorization is enforced on\nthe connected MongoDB instance. The following table lists the privileges required to access the\nfeatures as well as the built-in roles that can provide these\nprivileges: Compass View Capability Privilege(s) MongoDB Built-In Role Home/MongoDB Instance View performance clusterMonitor Database Create a Database createCollection readWrite Database Drop a Database dropDatabase dbAdmin Collection Create a Collection createCollection readWrite Collection Drop a Collection dropCollection readWrite Schema Query/View a Schema find read Documents Query/View a Document find read Documents Clone, insert, update, delete a document readWrite Indexes View an index listIndexes read Indexes Create, drop an index readWrite Explain Plan Query/View a query plan find read Validation View rules listCollections read Validation Update rules collMod dbAdmin The built-in roles may provide more access than required. You can\nalso create a  User-Defined Roles  to grant specific privileges.",
            "code": [],
            "preview": "MongoDB Compass users require specific privileges to access various\nCompass features if authentication/authorization is enforced on\nthe connected MongoDB instance.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/favorite-connections/import-export-cli/import",
            "title": "Import Favorite Connections with the CLI",
            "headings": [
                "Prerequisite",
                "Import Encrypted Favorite Connections",
                "Procedure",
                "Example",
                "Results",
                "Errors",
                "Import Unencrypted Favorite Connections",
                "Procedure",
                "Example",
                "Results"
            ],
            "paragraphs": "You can use the  Compass   CLI (Command-Line Interface)  to\nimport favorite connections. This lets you use saved connections from\nother workspaces or connections used by other team members. To import favorite connections, you must first  export the\nconnections . Use this procedure to import a list of favorite connections that is\n encrypted with a passphrase . To import unencrypted favorite connections with the  Compass \n CLI (Command-Line Interface) , specify: Your operation should resemble the following prototype: The path to the  MongoDB Compass  executable. The name and filepath of the\nexecutable depend on your operating system. The  --import-connections  option set to the destination of the file\ncontaining favorite connections. The  --passphrase  option set to the passphrase used to encrypt the\nexported file. The following example imports favorite  Compass  connections from\na file with the path\n /tmp/compass-connections/favorites-encrypted.json  that is encrypted\nwith the passphrase  abc123 . Run the following command in the folder containing your MongoDB Compass\nexecutable: The name and file path of the executable depend on your operating\nsystem. The preceding command is for macOS. After you run the import command, you will see this output: MongoDB Compass starts and you will see the imported connections under\n Saved Connections  on the Connect screen. When you try to import encrypted favorite connections, you may\nsee these errors: If do not specify a passphrase, you will see this error: If you specify an incorrect passphrase, you will see this error: Use this procedure to import a list of favorite connections that is not\nencrypted with a passphrase. To import unencrypted favorite connections with the  Compass \n CLI (Command-Line Interface) , specify: Your operation should resemble the following prototype: The path to the  MongoDB Compass  executable. The name and file path of the\nexecutable depend on your operating system. The  --import-connections  option set to the destination of the file\ncontaining favorite connections. The following example imports favorite  Compass  connections from\na file with the path  /tmp/compass-connections/favorites.json . Run the following command in the folder containing your MongoDB Compass\nexecutable: The name and file path of the executable depend on your operating\nsystem. The preceding command is for macOS. After you run the import command, you will see this output: MongoDB Compass starts and you will see the imported connections under\n Saved Connections  on the Connect screen.",
            "code": [
                {
                    "lang": "sh",
                    "value": "<path-to-Compass-executable> \\\n--import-connections=<filename> \\\n--passphrase=<passphrase>"
                },
                {
                    "lang": "sh",
                    "value": "./MongoDB\\ Compass \\\n--import-connections=/tmp/compass-connections/favorites-encrypted.json \\\n--passphrase=abc123"
                },
                {
                    "lang": "sh",
                    "value": "Importing connections from \"/tmp/compass-connections/favorites-encrypted.json\" (with passphrase)"
                },
                {
                    "lang": "sh",
                    "value": "Failed to perform operation Be [Error]: Input file contains encrypted\nsecrets but no passphrase was provided"
                },
                {
                    "lang": "sh",
                    "value": "Failed to perform operation Be [Error]: Cannot decrypt due to corrupt\ndata or wrong passphrase"
                },
                {
                    "lang": "sh",
                    "value": "<path-to-Compass-executable> --import-connections=<filename>"
                },
                {
                    "lang": "sh",
                    "value": "./MongoDB\\ Compass --import-connections=/tmp/compass-connections/favorites.json"
                },
                {
                    "lang": "sh",
                    "value": "Importing connections from \"/tmp/compass-connections/favorites.json\" (without passphrase)"
                }
            ],
            "preview": "You can use the Compass CLI (Command-Line Interface) to\nimport favorite connections. This lets you use saved connections from\nother workspaces or connections used by other team members.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/authentication-connection",
            "title": "Authentication Connection Tab",
            "headings": [
                "Procedure",
                "Click Advanced Connection Options.",
                "Click the Authentication tab.",
                "Username / Password",
                "X.509",
                "Kerberos",
                "Authenticate as a Different Kerberos User on Windows",
                "LDAP",
                "AWS IAM",
                "(Optional) For advanced connection configuration options, click the Advanced tab.",
                "Click Connect."
            ],
            "paragraphs": "The  Authentication  tab allows you to connect to deployments that\nrequire authentication. To learn about authentication mechanisms within MongoDB,\nsee  Authentication Mechanisms . Select your authentication method from the following options: Username / Password X.509 Kerberos LDAP AWS IAM Provide the following information: Username Password (Optional)  Authentication Database Authentication Mechancism: Default The  Default  setting selects the first authentication mechanism\nsupported by the server according to an order of preference. With the  Default  setting, MongoDB tries to authenticate using\nthe following mechanisms in the order they are listed: SCRAM-SHA-256 SCRAM-SHA-1 MONGODB-CR SCRAM-SHA-1 SCRAM-SHA-256 Select  X.509  if the deployment uses  X.509  as its authentication mechanism. X.509 Authentication requires a client certificate. To enable\nTLS and add a client certificate, see the  TLS / SSL tab \nin  Compass . Select  Kerberos  if the deployment uses  Kerberos  as its authentication mechanism. Provide the following information: Field Description Principal Every participant in the authenticated communication is known as a\n\"principal\", and every principal must have a unique name. (Optional) Service Name Every MongoDB  mongod  and  mongos  instance\n(or exe or exe on Windows) must have an associated service name. The\ndefault is  mongodb . (Optional) Canonicalize Host Name Kerberos uses the canonicalized form of the host name  (cname) \nwhen constructing the principal for  MongoDB Compass . (Optional) Service Realm The service realm is the domain over which a Kerberos authentication\nserver has the authority to authenticate a user. If you choose to  Canonicalize Host Name , you can specify\none of the following options: For more information on principal name canonicalization in Kerberos, see\nthis  RFC document . Option Description Forward The driver does a  cname  lookup on the kerberos hostname. Forward and Reverse Performs a forward DNS lookup and then a reverse lookup on that\nvalue to canonicalize the hostname. (Optional) Provide password directly Used to verify your identity. When you authenticate with Kerberos on Windows, the\n Principal  you specify must match the principal of the\nsecurity context that  Compass  is running. Normally, this\nis the logged-in user who is running  Compass . To authenticate as a different Kerberos user, run  MongoDB Compass  as the\nchosen user and specify the  Principal  for that user.\nTo run  MongoDB Compass  as a different user, either: After you start  MongoDB Compass  as the chosen user, to authenticate\nagainst your Kerberos-enabled MongoDB deployment, specify the\n Principal  for the corresponding user. Hold  Shift  and right-click the  MongoDB Compass  program\nicon to select  Run as a different user . Use the  runas  command-line tool. For example, the following\ncommand runs  MongoDB Compass  as a user named  admin : Select  LDAP  if the deployment uses  LDAP  as its authentication mechanism. Provide the following information: Username Password Select  AWS IAM  if the deployment uses  AWS IAM  as\nits authentication mechanism. The following fields are optional as they can be defined on your platform\nusing their respective AWS IAM environment variables.  MongoDB Compass  will\nuse these environment variable values to authenticate; you do not\nneed to specify them in the connection string. (Optional) AWS Access Key Id (Optional) AWS Secret Access Key (Optional) AWS Session Token To disconnect from your deployment, see  Disconnect from MongoDB .",
            "code": [
                {
                    "lang": "sh",
                    "value": "runas /profile /user:mymachine\\admin <path to MongoDB Compass>"
                }
            ],
            "preview": "The Authentication tab allows you to connect to deployments that\nrequire authentication. To learn about authentication mechanisms within MongoDB,\nsee Authentication Mechanisms.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/in-use-encryption",
            "title": "In-Use Encryption Connection Tab",
            "headings": [
                "Procedure",
                "Click Advanced Connection Options.",
                "Click the In-Use Encryption tab.",
                "Provide a Key Vault Namespace.",
                "Select a KMS Provider.",
                "Local KMS",
                "AWS",
                "GCP",
                "Azure",
                "KMIP",
                "(Optional) Specify an EncryptedFieldsMap",
                "Click Connect."
            ],
            "paragraphs": "In-Use Encryption  is an Enterprise/Atlas only feature. You need a\nreplica set or sharded cluster to use this connection option. Your replica set\ncan be a single node or larger. The  In-Use Encryption  connection tab allows you to connect your\ndeployments using  Queryable Encryption . A  Key Vault Namespace  refers to a collection that\ncontains all the data keys used for encryption and decryption. Specify a collection in which data encryption keys are stored in\nthe format  <db>.<collection> . The non-official default\ndatabase/collection for keyVault is  encryption.__keyVault . You can select from the following Key Management Systems: Local KMS AWS GCP Azure KMIP You can locally manage your key as a KMS using the\n Local KMS \noption. Click  Generate Random Key  to generate a 96-byte long\nbase64-encoded string. You need this key to access encrypted and\ndecrypted data. Compass  does not save KMS credentials by default. Copy\nand save the key in an external location. You can use  AWS \nto manage your keys. Specify the following fields: Field Required Description Access Key Id Yes Value of your AWS access key Id. Secret Access Key Yes Value of your AWS secret key. Session Token No Value of your AWS session token. Certificate Authority No One or more certificate files from trusted Certificate\nAuthorities to validate the certificate provided by the deployment. Client Certificate and Key No Specifies the location of a local .pem file that contains\neither the client's TLS/SSL X.509 certificate or the client's TLS/SSL\ncertificate and key. Client Key Password No If the  Client Private Key  is protected with a password,\nyou must provide the password. You can use  Google Cloud Services  to manage your keys. Specify the following fields: Field Required Description Service Account Email Yes The service account email to authenticate. Private Key Yes A base64-encoded private key. Endpoint No A host with an optional port. Certificate Authority No One or more certificate files from trusted Certificate\nAuthorities to validate the certificate provided by the deployment. Client Certificate and Key No Specifies the location of a local .pem file that contains\neither the client's TLS/SSL X.509 certificate or the client's TLS/SSL\ncertificate and key. Client Key Password No If the  Client Private Key  is protected with a password,\nyou must provide the password. You can use  Azure Key Vault \nto manage your keys. Specify the following fields: Field Required Description Tenant Id Yes Identifies the organization for the account. Client Id Yes Authenticates a registered application. Client Secret Yes The client secret to authenticate a registered application. Identity Platform Endpoint Yes A host with an optional port. Certificate Authority No One or more certificate files from trusted Certificate\nAuthorities to validate the certificate provided by the deployment. Client Certificate and Key No Specifies the location of a local .pem file that contains\neither the client's TLS/SSL X.509 certificate or the client's TLS/SSL\ncertificate and key. Client Key Password No If the  Client Private Key  is protected with a password,\nyou must provide the password. You can use  KMIP \nto manage your keys. Field Required Description Endpoint Yes The endpoint consists of a hostname and port separated by a colon. Certificate Authority No One or more certificate files from trusted Certificate\nAuthorities to validate the certificate provided by the deployment. Client Certificate and Key No Specifies the location of a local .pem file that contains\neither the client's TLS/SSL X.509 certificate or the client's TLS/SSL\ncertificate and key. Client Key Password No If the  Client Private Key  is protected with a password,\nyou must provide the password. Add an optional client-side EncryptedFieldsMap for enhanced security. For more information, see  Fields for Encryption .",
            "code": [],
            "preview": "In-Use Encryption is an Enterprise/Atlas only feature. You need a\nreplica set or sharded cluster to use this connection option. Your replica set\ncan be a single node or larger.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "collections/clustered-collection",
            "title": "Create a Clustered Collection",
            "headings": [
                "Restrictions",
                "Steps",
                "Open the Create Collection dialog box.",
                "Enter the collection name.",
                "Select the type of collection you want to create.",
                "(Optional) Name your clustered index.",
                "(Optional) Enter the number of seconds for the expireAfterSeconds field.",
                "Click Create Collection to create your new collection.",
                "Next Steps"
            ],
            "paragraphs": "Clustered collections  are collections\nwith a clustered index. Clustered collections store documents ordered by  clustered index \nkey value. You can use clustered collections when only one clustered index is\nnecessary. Clustered collection limitations: The clustered index key must be on the  _id  field. Clustered collections may not be  capped collections . Select a database and from the  Collections  screen, click the\n Create Collection  button. You can also click the  +  next to the name of the database you select\nto open the  Create Collection  dialog box. From the  Advanced Collection Options  drop-down, select\n Clustered Collections . You can enter a name for the clustered index or use the automatically\ngenerated name. The  expireAfterSeconds  field is a  TTL index \nthat enables automatic deletion of documents older than the specified\nnumber of seconds. The  expireAfterSeconds  field must be a positive,\nnon-zero value. In the  Collections  screen, your new collection is marked by a\n Clustered  badge next to the collection name. Manage Documents Query Your Data Analyze Your Data Scheme",
            "code": [],
            "preview": "Clustered collections are collections\nwith a clustered index. Clustered collections store documents ordered by clustered index\nkey value. You can use clustered collections when only one clustered index is\nnecessary.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "connect/favorite-connections/import-export-cli/export",
            "title": "Export Favorite Connections with the CLI",
            "headings": [
                "About This Task",
                "Export Encrypted Favorite Connections",
                "Procedure",
                "Example",
                "Results",
                "Export Unencrypted Favorite Connections",
                "Procedure",
                "Example",
                "Results",
                "Next Steps"
            ],
            "paragraphs": "You can use the  Compass   CLI (Command-Line Interface)  to\nexport favorite connections. Colleagues can import your favorites, or\nyou can use them yourself in your other workspaces. When you export favorite connections,  Compass  exports the list\nof connections as a JSON file. By default, when you export favorite connections, database usernames and\npasswords are included in plaintext. To protect sensitive connection\ninformation, you may encrypt the exported file with a passphrase. This section shows how to export encrypted favorite connections. When\nyou encrypt the export file, users must specify the matching passphrase\nto import the connections. To export encrypted favorite connections with the  Compass \n CLI (Command-Line Interface) , specify: Your operation should resemble the following prototype: The path to the  MongoDB Compass  executable. The name and file path of the\nexecutable depend on your operating system. The  --export-connections  option set to the destination of the\noutput file. The  --passphrase  option set to a passphrase used to encrypt the\noutput file. This example exports favorite  Compass  connections to a file with\nthe path  /tmp/compass-connections/favorites-encrypted.json . The exported file\nis encrypted with the passphrase  abc123 . Run the following command in the folder containing your MongoDB Compass\nexecutable: You will see this output: The name and file path of the executable depend on your operating\nsystem. The preceding command is for macOS. After the export completes, the\n /tmp/compass-connections/favorites-encrypted.json  file resembles the\nfollowing: Sensitive connection information is encrypted in the\n connectionSecrets  field. This section shows how to export unencrypted favorite connections. If\nyou do not encrypt the export file, database usernames and passwords are\nexported in plaintext. Only export unencrypted connections if no other\nusers will have access to the exported file. To export encrypted favorite connections with the  Compass \n CLI (Command-Line Interface) , specify: Your operation should resemble the following prototype: The path to the  MongoDB Compass  executable. The name and file path of the\nexecutable depend on your operating system. The  --export-connections  option set to the destination of the\noutput file. This example exports favorite  Compass  connections to a file with\nthe path  /tmp/compass-connections/favorites.json . Run the following command in the folder containing your MongoDB Compass\nexecutable: You will see this output: The name and file path of the executable depend on your operating\nsystem. The preceding command is for macOS. After the export completes, the\n /tmp/compass-connections/favorites.json  file resembles the\nfollowing: To learn how to import exported connections, see\n Import Favorite Connections with the CLI .",
            "code": [
                {
                    "lang": "sh",
                    "value": "<path-to-Compass-executable> \\\n--export-connections=<filename> \\\n--passphrase=<passphrase>"
                },
                {
                    "lang": "sh",
                    "value": "./MongoDB\\ Compass \\\n--export-connections=/tmp/compass-connections/favorites-encrypted.json \\\n--passphrase=abc123"
                },
                {
                    "lang": "sh",
                    "value": "Exporting connections to \"/tmp/compass-connections/favorites-encrypted.json\" (with passphrase)"
                },
                {
                    "lang": "json",
                    "value": "{\n  \"type\": \"Compass Connections\",\n  \"version\": {\n    \"$numberInt\": \"1\"\n  },\n  \"connections\": [\n    {\n      \"id\": \"5a92e195-3ef5-49ae-aff6-720af362770d\",\n      \"connectionOptions\": {\n        \"connectionString\": \"mongodb+srv://jallen@cluster0.ylwlz.mongodb.net/\"\n      },\n      \"favorite\": {\n        \"name\": \"Dochub\",\n        \"color\": \"color7\"\n      },\n      \"lastUsed\": {\n        \"$date\": {\n          \"$numberLong\": \"1663785601002\"\n        }\n      },\n      \"connectionSecrets\": \"AAGRWyDUI+Jbc9GkvSpEZeFtbvSzqtcOpA+1zLi5fma3AISOOVVBJBPqqh/a6VeNyEcf9TdX6aCqSpagXgMAOmmN0XgkJ4wxwBuSZwZH/h1dlgEFYqEG9Oh88e5z\"\n    },\n    {\n      \"id\": \"655f3e6e-b13b-4813-8578-50d896bd9240\",\n      \"connectionOptions\": {\n        \"connectionString\": \"mongodb://localhost:27017/\"\n      },\n      \"favorite\": {\n        \"name\": \"Local Host\",\n        \"color\": \"color7\"\n      },\n      \"lastUsed\": {\n        \"$date\": {\n          \"$numberLong\": \"1663790327679\"\n        }\n      },\n      \"connectionSecrets\": \"AAG63lys6oVtPmCGVs7wYkTCjFU0yXi9rYUYCKuWGNMSNBy4rAZlu06b/qDblON4OBXDJzhPNQ/WKs79veewNw==\"\n    }\n  ]\n}"
                },
                {
                    "lang": "sh",
                    "value": "<path-to-Compass-executable> \\\n--export-connections=<filename>"
                },
                {
                    "lang": "sh",
                    "value": "./MongoDB\\ Compass \\\n--export-connections=/tmp/compass-connections/favorites.json"
                },
                {
                    "lang": "sh",
                    "value": "Exporting connections to \"/tmp/compass-connections/favorites.json\" (without passphrase)"
                },
                {
                    "lang": "json",
                    "value": "{\n  \"type\": \"Compass Connections\",\n  \"version\": {\n    \"$numberInt\": \"1\"\n  },\n  \"connections\": [\n    {\n      \"id\": \"5a92e195-3ef5-49ae-aff6-720af362770d\",\n      \"connectionOptions\": {\n        \"connectionString\": \"<connection string>\"\n      },\n      \"favorite\": {\n        \"name\": \"QA Cluster\",\n        \"color\": \"color7\"\n      },\n      \"lastUsed\": {\n        \"$date\": {\n          \"$numberLong\": \"1663785601002\"\n        }\n      }\n    },\n    {\n      \"id\": \"655f3e6e-b13b-4813-8578-50d896bd9240\",\n      \"connectionOptions\": {\n        \"connectionString\": \"mongodb://localhost:27017/\"\n      },\n      \"favorite\": {\n        \"name\": \"Local Host\",\n        \"color\": \"color7\"\n      },\n      \"lastUsed\": {\n        \"$date\": {\n          \"$numberLong\": \"1663790327679\"\n        }\n      }\n    }\n  ]\n}"
                }
            ],
            "preview": "You can use the Compass CLI (Command-Line Interface) to\nexport favorite connections. Colleagues can import your favorites, or\nyou can use them yourself in your other workspaces.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "collections/capped-collection",
            "title": "Create a Capped Collection",
            "headings": [
                "Procedure",
                "Click the Create Collection button.",
                "Enter the collection name.",
                "Click the Advanced Collection Options dropdown.",
                "Enter the size of the capped collection.",
                "Click Create Collection to create the collection.",
                "Restrictions and Limitations"
            ],
            "paragraphs": "Capped Collections  are fixed-sized\ncollections that support high-throughput operations that insert and retrieve\ndocuments based on insertion order. From the  Collections  screen, click the\n Create Collection  button. Check the  Capped Collection  option. Enter the maximum number of bytes that the collection can hold. The following restrictions and limitations apply when creating a\ncapped collection: Custom collation  is the only  Advanced Collection Option \nthat can be used alongside your capped collection. If you import a data set larger than the maximum size of the capped collection,\n Compass  only loads the last documents of the data set and drops the oldest\ndocuments. Once the collection is created, you cannot adjust the maximum number of bytes.",
            "code": [],
            "preview": "Capped Collections are fixed-sized\ncollections that support high-throughput operations that insert and retrieve\ndocuments based on insertion order.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "collections/encrypted-collection",
            "title": "Create a Collection with Queryable Encryption",
            "headings": [
                "Procedure",
                "Click the Create Collection button.",
                "Enter the collection name.",
                "Click the Advanced Collection Options dropdown.",
                "Specify an Encrypted Field.",
                "Click Create Collection to create the collection.",
                "Restrictions and Limitations"
            ],
            "paragraphs": "Queryable Encryption  allows you to\nencrypt a subset of fields in your collection. From the  Collections  screen, click the\n Create Collection  button. Check the  Queryable Encryption  option. Specify which fields should be encrypted and whether they should\nbe queryable. The following fields must be used if no existing keyId was specified for\nat least one encrypted field, and have no effect otherwise: KMS Provider . Key Encryption Key . Your collection will be marked by a  Queryable Encryption \nbadge. Your deployment must be connected using In-Use Encryption to encrypt your\ncollection using Queryable Encryption. Custom collation  is the only  Advanced Collection Option \nthat can be used alongside Queryable Encryption.",
            "code": [],
            "preview": "Queryable Encryption allows you to\nencrypt a subset of fields in your collection.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "collections/time-series-collection",
            "title": "Create a Time Series Collection",
            "headings": [
                "Procedure",
                "Click the Create Collection button.",
                "Enter the collection name.",
                "Click the Advanced Collection Options dropdown.",
                "Specify a timeField.",
                "Click Create Collection to create the collection.",
                "Restrictions and Limitations"
            ],
            "paragraphs": "Time series collections  efficiently\nstore sequences of measurements over a period of time. From the  Collections  screen, click the\n Create Collection  button. Check the  Time Series Collection  option. Specify which field should be used as the  timeField  for the time-series\ncollection. This field must have a  BSON type date . The following fields are optional: For more information on time series fields, see\n Time Series Collections . Field Description metaField The name of the field which contains metadata in each time series\ndocument. The metadata in the specified field should be data that\nis used to label a unique series of documents. granularity The  granularity  field allows specifying a coarser granularity so\nmeasurements over a longer time span can be more efficiently stored\nand queried. The default value is set to  seconds . expireAfterSeconds The  expireAfterSeconds  field enables automatic deletion of\ndocuments older than the specified number of seconds. Your collection will be marked by a  time series  badge. On the\nleft-hand navigation bar your time series collection will have the\nfollowing icon: The following restrictions and limitations apply when creating a time series\ncollection: Custom collation  is the only  Advanced Collection Option \nthat can be used alongside your time series collation. See  Time Series Collection Limitations \nfor all time series collection limitations.",
            "code": [],
            "preview": "Time series collections efficiently\nstore sequences of measurements over a period of time.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "collections/collation-collection",
            "title": "Create a Collection with Collation",
            "headings": [
                "Procedure",
                "Click the Create Collection button.",
                "Enter the collection name.",
                "Click the Advanced Collection Options dropdown.",
                "Select a value for locale.",
                "Click Create Collection to create the collection.",
                "Restrictions and Limitations",
                "Example"
            ],
            "paragraphs": "Collation  allows you to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks. From the  Collections  screen, click the\n Create Collection  button. Check the  Use Custom Collaton  option. You are required to select a  locale  from the  MongoDB\nsupported languages . All other collation options parameters are optional. For descriptions of\nthe fields, see  Collation . The following restrictions apply when the parameter  numericOrdering \nis set to  true : Only contiguous non-negative integer substrings of digits are\nconsidered in the comparisons.  numericOrdering  does not support: + - exponents Only Unicode code points in the Number or Decimal Digit (Nd) category\nare treated as digits. If the number length exceeds 254 characters, the excess characters are\ntreated as a separate number. Consider a collection with the following string number and decimal values: The following find query uses a collation document containing the\n numericOrdering  parameter: For more information on querying documents in  Compass , see\n Query Your Data . The operations returns the following results: numericOrdering: true  sorts the string values in ascending order as if\nthey were numeric values. The two negative values  -2.1  and  -10  are not sorted in the\nexpected sort order because they have unsupported  -  characters.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "[\n  { \"n\": \"1\" },\n  { \"n\": \"2\" },\n  { \"n\": \"-2.1\" },\n  { \"n\": \"2.0\" },\n  { \"n\": \"2.20\" },\n  { \"n\": \"10\"},\n  { \"n\": \"20\" },\n  { \"n\": \"20.1\" },\n  { \"n\": \"-10\" },\n  { \"n\": \"3\" }\n]"
                },
                {
                    "lang": "javascript",
                    "value": " db.c.find(\n  { }, { _id: 0 }\n ).sort(\n   { n: 1 }\n  ).collation( {\n   locale: 'en_US',\n   numericOrdering: true\n} )"
                },
                {
                    "lang": "javascript",
                    "value": "[\n   { \"n\": \"-2.1\" },\n   { \"n\": \"-10\" },\n   { \"n\": \"1\" },\n   { \"n\": \"2\" },\n   { \"n\": \"2.0\" }\n   { \"n\": \"2.20\" },\n   { \"n\": \"3\" },\n   { \"n\": \"10\" },\n   { \"n\": \"20\" },\n   {\"n\": \"20.1\" }\n]"
                }
            ],
            "preview": "Collation allows you to specify\nlanguage-specific rules for string comparison, such as rules for lettercase\nand accent marks.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "troubleshooting/logs",
            "title": "Retrieve Compass Logs",
            "headings": [
                "View Compass Logs",
                "In the Compass top menu bar, click Help.",
                "In the Help menu, click Open Log File.",
                "Choose how to open the log file.",
                "Compass Log Location",
                "Log File Format",
                "Log Retention"
            ],
            "paragraphs": "As part of normal operation,  MongoDB Compass  maintains a running log of\nevents.  Compass  logs provide a history of operations and can\nhelp diagnose errors. MongoDB Compass  redacts credentials from the logs. Compass  opens a dialog containing the location of your log file. You can either: Copy the path to the log file to your clipboard. Open the folder containing your log file. Extract the log file and view it as a text file. Compass  maintains one log file per session, compressed into a\ngzip archive file. The corresponding session ID is included in the log\nfile name. The directory where  Compass  writes logs depends on your\noperating system. Operating System Directory macOS ~/.mongodb/compass/<LogID>_log.gz Linux ~/.mongodb/compass/<LogID>_log.gz Windows %UserProfile%/AppData/Local/mongodb/compass/<LogID>_log.gz Compass  outputs log messages in structured JSON format. The\nmessages are written in the same format used for MongoDB server logs. To learn more about MongoDB logs and see examples, see\n Log Messages . Compass  retains log files for 30 days. Log files older than 30\ndays are automatically deleted.",
            "code": [],
            "preview": "As part of normal operation, MongoDB Compass maintains a running log of\nevents. Compass logs provide a history of operations and can\nhelp diagnose errors.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "schema/export",
            "title": "Export Your Schema",
            "headings": [
                "Schema Object Properties",
                "Example Schema"
            ],
            "paragraphs": "You can export your schema after analyzing it. This is useful for\nsharing your schema and comparing schemas across collections. If you have not already done so, analyze your schema: Once your schema has been analyzed, export your schema: Your schema is copied to your clipboard as a  JSON (Javascript Object Notation)  object. Select your desired collection and click the  Schema  tab. Click  Analyze Schema . When  Compass  analyzes your schema, it samples a random\nsubset of documents from your collection. To learn more about\nsampling, see  Sampling . In the top menu bar, click  Collection . From the dropdown, click  Share Schema as JSON . Schema objects have  count  and  fields  properties: count  is an integer that represents the number of documents\n sampled  from the collection to generate the schema. fields  is an array of metadata objects that correspond to each\nfield in the documents analyzed during sampling. Each element in the\n fields  array contains the following fields: Property Data type Description name String Name of the corresponding field, e.g.  _id . path String Path to the corresponding field within a document. count Integer Number of documents in which the corresponding field appears. types Array Array of metadata objects that represent each data type that\nappears in the corresponding field. types[n].name String Name of this data type. types[n].bsonType String BSON (Binary Javascript Object Notation)  type of this data type. types[n].path String Path to the corresponding field within a document. types[n].count Integer Number of times this data type appears in the corresponding\nfield. types[n].values Array Array of the actual sampled values that\nappear in the corresponding field and match this data type. types[n].total_count Integer If the corresponding field is an array, the number of elements\nin that array. types[n].probability Number Probability that the value of the corresponding field is this\ndata type in a random document. types[n].unique Integer Number of unique values of this data type that appear in\nthe corresponding field. types[n].has_duplicates Boolean true  if a single value of this data type appears multiple\ntimes in the corresponding field. Otherwise  false . types[n].lengths Array If this data type is an array, an array of integers representing\nthe lengths of arrays found in the corresponding field. Not\npresent for other data types. types[n].average_length Number If this data type is an array, the average length of arrays in\nthe corresponding field across sampled documents. Not present\nfor other data types. total_count Integer Number of documents sampled from the collection. type String or Array String or array of strings representing possible types for\nthe corresponding field. has_duplicates Boolean true  if a single value appears multiple times in\nthe corresponding field. Otherwise  false . probability Number Probability that a random document contains the corresponding\nfield. The following example uses a collection of 3 documents, each\nwith a  sport  field and unique information about that sport: You can import the above example to  MongoDB Compass  to experiment with schema\noutputs. To import the example collection into  MongoDB Compass : The example above outputs the following schema: Copy  the JSON documents above. In  MongoDB Compass , select a collection or create a new collection to\nimport the copied documents to. The  Documents  tab\ndisplays. Click  Add Data . Select  Insert Document  from the dropdown. In the JSON view of the dialog, paste the copied documents and click\n Insert .",
            "code": [
                {
                    "lang": "json",
                    "value": "[\n  {\n    \"_id\": { \"$oid\":\"5e8359ba7782b98ba98c16fd\" },\n    \"sport\": \"Baseball\",\n    \"equipment\": [ \"bat\", \"baseball\", \"glove\", \"helmet\" ]\n  },\n  {\n    \"_id\": { \"$oid\":\"5e835a727782b98ba98c16fe\" },\n    \"sport\": \"Football\",\n    \"variants\": {\n        \"us\":\"Soccer\",\n        \"eu\":\"Football\"\n    }\n  },\n  {\n    \"_id\": { \"$oid\":\"5e835ade7782b98ba98c16ff\" },\n    \"sport\": \"Cricket\",\n    \"origin\": \"England\"\n  }\n]"
                },
                {
                    "lang": "json",
                    "value": "{\n  \"fields\": [\n    {\n      \"name\": \"_id\",\n      \"path\": \"_id\",\n      \"count\": 3,\n      \"types\": [\n        {\n          \"name\": \"ObjectID\",\n          \"bsonType\": \"ObjectID\",\n          \"path\": \"_id\",\n          \"count\": 3,\n          \"values\": [\n            \"5e8359ba7782b98ba98c16fd\",\n            \"5e835a727782b98ba98c16fe\",\n            \"5e835ade7782b98ba98c16ff\"\n          ],\n          \"total_count\": 0,\n          \"probability\": 1,\n          \"unique\": 3,\n          \"has_duplicates\": false\n        }\n      ],\n      \"total_count\": 3,\n      \"type\": \"ObjectID\",\n      \"has_duplicates\": false,\n      \"probability\": 1\n    },\n    {\n      \"name\": \"equipment\",\n      \"path\": \"equipment\",\n      \"count\": 1,\n      \"types\": [\n        {\n          \"name\": \"Undefined\",\n          \"type\": \"Undefined\",\n          \"path\": \"equipment\",\n          \"count\": 2,\n          \"total_count\": 0,\n          \"probability\": 0.6666666666666666,\n          \"unique\": 1,\n          \"has_duplicates\": true\n        },\n        {\n          \"name\": \"Array\",\n          \"bsonType\": \"Array\",\n          \"path\": \"equipment\",\n          \"count\": 1,\n          \"types\": [\n            {\n              \"name\": \"String\",\n              \"bsonType\": \"String\",\n              \"path\": \"equipment\",\n              \"count\": 4,\n              \"values\": [\n                \"bat\",\n                \"baseball\",\n                \"glove\",\n                \"helmet\"\n              ],\n              \"total_count\": 0,\n              \"probability\": 1,\n              \"unique\": 4,\n              \"has_duplicates\": false\n            }\n          ],\n          \"lengths\": [\n            4\n          ],\n          \"total_count\": 4,\n          \"probability\": 0.3333333333333333,\n          \"average_length\": 4\n        }\n      ],\n      \"total_count\": 3,\n      \"type\": [\n        \"Undefined\",\n        \"Array\"\n      ],\n      \"has_duplicates\": true,\n      \"probability\": 0.3333333333333333\n    },\n    {\n      \"name\": \"origin\",\n      \"path\": \"origin\",\n      \"count\": 1,\n      \"types\": [\n        {\n          \"name\": \"Undefined\",\n          \"type\": \"Undefined\",\n          \"path\": \"origin\",\n          \"count\": 2,\n          \"total_count\": 0,\n          \"probability\": 0.6666666666666666,\n          \"unique\": 1,\n          \"has_duplicates\": true\n        },\n        {\n          \"name\": \"String\",\n          \"bsonType\": \"String\",\n          \"path\": \"origin\",\n          \"count\": 1,\n          \"values\": [\n            \"England\"\n          ],\n          \"total_count\": 0,\n          \"probability\": 0.3333333333333333,\n          \"unique\": 1,\n          \"has_duplicates\": false\n        }\n      ],\n      \"total_count\": 3,\n      \"type\": [\n        \"Undefined\",\n        \"String\"\n      ],\n      \"has_duplicates\": true,\n      \"probability\": 0.3333333333333333\n    },\n    {\n      \"name\": \"sport\",\n      \"path\": \"sport\",\n      \"count\": 3,\n      \"types\": [\n        {\n          \"name\": \"String\",\n          \"bsonType\": \"String\",\n          \"path\": \"sport\",\n          \"count\": 3,\n          \"values\": [\n            \"Baseball\",\n            \"Football\",\n            \"Cricket\"\n          ],\n          \"total_count\": 0,\n          \"probability\": 1,\n          \"unique\": 3,\n          \"has_duplicates\": false\n        }\n      ],\n      \"total_count\": 3,\n      \"type\": \"String\",\n      \"has_duplicates\": false,\n      \"probability\": 1\n    },\n    {\n      \"name\": \"variants\",\n      \"path\": \"variants\",\n      \"count\": 1,\n      \"types\": [\n        {\n          \"name\": \"Undefined\",\n          \"type\": \"Undefined\",\n          \"path\": \"variants\",\n          \"count\": 2,\n          \"total_count\": 0,\n          \"probability\": 0.6666666666666666,\n          \"unique\": 1,\n          \"has_duplicates\": true\n        },\n        {\n          \"name\": \"Document\",\n          \"bsonType\": \"Document\",\n          \"path\": \"variants\",\n          \"count\": 1,\n          \"fields\": [\n            {\n              \"name\": \"eu\",\n              \"path\": \"variants.eu\",\n              \"count\": 1,\n              \"types\": [\n                {\n                  \"name\": \"String\",\n                  \"bsonType\": \"String\",\n                  \"path\": \"variants.eu\",\n                  \"count\": 1,\n                  \"values\": [\n                    \"Football\"\n                  ],\n                  \"total_count\": 0,\n                  \"probability\": 1,\n                  \"unique\": 1,\n                  \"has_duplicates\": false\n                }\n              ],\n              \"total_count\": 1,\n              \"type\": \"String\",\n              \"has_duplicates\": false,\n              \"probability\": 1\n            },\n            {\n              \"name\": \"us\",\n              \"path\": \"variants.us\",\n              \"count\": 1,\n              \"types\": [\n                {\n                  \"name\": \"String\",\n                  \"bsonType\": \"String\",\n                  \"path\": \"variants.us\",\n                  \"count\": 1,\n                  \"values\": [\n                    \"Soccer\"\n                  ],\n                  \"total_count\": 0,\n                  \"probability\": 1,\n                  \"unique\": 1,\n                  \"has_duplicates\": false\n                }\n              ],\n              \"total_count\": 1,\n              \"type\": \"String\",\n              \"has_duplicates\": false,\n              \"probability\": 1\n            }\n          ],\n          \"total_count\": 0,\n          \"probability\": 0.3333333333333333\n        }\n      ],\n      \"total_count\": 3,\n      \"type\": [\n        \"Undefined\",\n        \"Document\"\n      ],\n      \"has_duplicates\": true,\n      \"probability\": 0.3333333333333333\n    }\n  ],\n  \"count\": 3\n}"
                }
            ],
            "preview": "You can export your schema after analyzing it. This is useful for\nsharing your schema and comparing schemas across collections.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "troubleshooting/connection-errors",
            "title": "Compass Connection Errors",
            "headings": [
                "MongoDB Not Running on the Provided Host and Port",
                "Likely Causes",
                "Solutions",
                "Ensure Your MongoDB Instance is Running",
                "Required Config File Setting: bindIp",
                "Hostname and Port",
                "MongoDB Server Moved or Shutdown",
                "Firewall",
                "MongoDB Server Moved or Shutdown",
                "Firewall",
                "Atlas IP Whitelist Does Not Include Your Address",
                "Insert Document Button Disabled and Cannot Modify Documents",
                "Possible Observations",
                "Likely Cause",
                "Solutions",
                "Check Read Preference Setting",
                "Check Replica Set Name",
                "Check Your Compass Edition",
                "Connection to Cluster Shard Closed",
                "Possible Observations",
                "Likely Cause",
                "Solution",
                "Not Master or Secondary is Not Writable",
                "Solutions",
                "Verify Atlas Replica Set Name",
                "Allow Compass to Connect to the Secondary",
                "Authentication Failed",
                "Likely Causes",
                "Solutions",
                "Check the Compass Logs",
                "Additional Resources"
            ],
            "paragraphs": "The sections on this page list common errors seen when connecting to\n MongoDB Compass  and provide possible solutions. Your connection failed when Compass attempted to connect to your\ndatabase on the specified host and port. This error often occurs when: You provide no hostname or an invalid hostname to the  Compass \nconnect dialog. The destination server rejects a connection on an incorrect port. Your MongoDB cluster or server has been shutdown or the server\nhostname has changed. You have a firewall actively blocking connections to/from your local\nnetwork. The solution to this issue may depend on how your MongoDB environment\nis configured. Select the appropriate tab for your MongoDB environment\nto view possible solutions: Try these solutions if you have a self-hosted MongoDB server,\nreplica set, or cluster. Compass  must connect to a running MongoDB instance.\nMake sure you have\n installed MongoDB and have a running mongod process .\nYou should also check that the port where your MongoDB instance is\nrunning matches the port you provide in the  Compass \nconnect dialog. If you recently installed the MongoDB database server and are\nunable to establish an initial connection to that server,\nverify that you have specified a valid  net.bindIp \nsetting in your server  configuration file . If your self-hosted server is listening on an external network\nvia  net.bindIp , verify that you have specified your\n Hostname  and  Port  correctly in the\n Compass  connect dialog. It is possible that your MongoDB cluster or server has been\nshutdown or had its hostname has changed. Contact your database\nadministrator for updates on the status of your database. If you believe your firewall may be actively blocking\nconnections to the port(s) your database(s) are operating on,\ntry connecting from a different location, such as a home or\ninternet cafe network. You can also visit  http://portquiz.net/ \nto test your connection to different ports. If you are connecting to an  Atlas  cluster, first follow\nthe procedure described in the  Connect via Compass  page in the  Atlas  documentation.\nThe steps on that page will help ensure that your connection\nsettings are optimized for  Atlas . It is possible that your MongoDB cluster or server has been\nshutdown or had its hostname has changed. Contact your database\nadministrator for updates on the status of your database. If you believe your firewall may be actively blocking\nconnections to your database, try connecting from a different\nlocation, such as a home or internet cafe network. Atlas  clusters operate on port 27017. You must be able to\naccess this port to access your cluster. To check if your\nlocal network blocks connections to port 27017, visit\n http://portquiz.net:27017/ . Atlas  only allows connections to a cluster from addresses\nlisted in the project  IP whitelist . Ensure that you have\nwhitelisted your IP address so you can connect to your\ncluster. When using  Compass , you may be in a state where you cannot\nperform any write operations, and can only read data. When you are in this state: The  Create Collection  and  Insert Document \nbuttons are disabled. You cannot modify any of your documents. There are two likely causes for this behavior: You are connected to a secondary member of your cluster, which\ndoes not support write operations. You are using  Compass Readonly  edition, which does not\nsupport write operations. In the  Compass   connection dialog , set your\n Read Preference  to  Primary . This will ensure\nthat you connect to your cluster's primary member, which supports\nwrite operations. Check that your  Replica Set Name  is accurate.\n Compass  is only able to identify the primary correctly if the\nreplica set name is accurate. If your cluster is hosted in  Atlas , you can obtain the correct\nreplica set name using the following procedure: Navigate to your  Atlas   Clusters  view. Click  Connect  for your desired cluster. Click  Connect with MongoDB Compass . Copy the provided connection string. Open  MongoDB Compass . Click  Yes  to auto-fill the connection settings. You cannot perform write operations in  Compass Readonly \nedition. You can check your Compass edition by opening the\ntop-level Compass dropdown menu and selecting\n About MongoDB Compass . To perform write operations, you must download a different edition\nof MongoDB Compass. For more information on the differences between\nCompass editions, see\n Capabilities of Compass Editions . This error means that the connection to your MongoDB cluster was closed\nbefore the initial setup completed. You may see an error in  MongoDB Compass  similar to the following: The most common source of this error is a missing  Atlas \n IP whitelist  entry for the public IP\naddress where  Compass  is running. Ensure the public IP address where  Compass  is running is\nincluded in your  Atlas  project's IP whitelist. To configure your  Atlas  whitelist: Atlas  recognizes which entries in the whitelist include your\ncurrent IP address, and appends these addresses with\n (includes your current IP address) . Use the  Context  dropdown in the top-left of  Atlas \nto select your desired  Atlas  project. Click the  Security  tab. Click the  IP Whitelist  menu option. If your IP address is not in the whitelist, click\n Add IP Address . Click  Add Current IP Address . Click  Confirm . For more information on configuring whitelist entries, see\n Configure Whitelist Entries  in the\n Atlas  documentation. This error message indicates that you have connected to one of the\nsecondary members of a replica set without providing the correct\nreplica set name  and  requiring a connection to a primary in your\n Read Preference . You should ensure that you are providing the correct replica set name\nin the  Compass  connect dialog. If your cluster is hosted in  Atlas , you can obtain the correct\nreplica set name using the following procedure: Navigate to your  Atlas   Clusters  view. Click  Connect  for your desired cluster. Click  Connect with MongoDB Compass . Copy the provided connection string. Open  MongoDB Compass . Click  Yes  to auto-fill the connection settings. Another approach to resolving this error is to allow  Compass  to\nconnect to a secondary cluster member. Change your\n Read Preference  to either  Primary Preferred  or\n Secondary Preferred  in your connection settings. This\nshould allow you to bypass this error and connect. When you connect to a secondary cluster member, you cannot\ncreate or modify documents, indexes, or databases. Only use this\nsolution when you do not need to perform any write operations. For more information on read preferences, see\n Read Preference  in the MongoDB\nmanual. When you attempt to connect to your cluster using  Compass , you\nmay encounter an error message stating\n Authentication Failed . This error message is often the result of one of five conditions: Your  Password  is missing after autofilling your\nconnection details from a copied connection string.  Compass \nrequires you to manually enter your password in the connection dialog\nas a security precaution. Your  Username  and/or  Password  are incorrect. You have not  configured any MongoDB users  for your  Atlas  cluster. You did not select the correct  Authentication  method. You did not specify the correct  Authentication Database .\nThis setting corresponds to the  authSource  connection\nstring option. For  Atlas  clusters, the  Authentication Database  is\nusually  admin . Ensure you provided the correct  Username  and\n Password . Ensure that the MongoDB user you are authenticating as exists. Verify your  Authentication Database  and authentication\nmechanism. Verify that your selected authentication mechanism is supported by\nyour MongoDB database. The  Compass  logs can provide additional information on\nconnection errors. You may find more detailed error messages to help\ndiagnose your issue. For more information, see  Retrieve Compass Logs . Connect to Atlas via Compass Troubleshoot Atlas Connections",
            "code": [
                {
                    "lang": "none",
                    "value": "connection 3 to cluster0-shard-00-00-a1b2c.mongodb.net:27017 closed"
                }
            ],
            "preview": "The sections on this page list common errors seen when connecting to\nMongoDB Compass and provide possible solutions.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/collation",
            "title": "Set Language Specific Rules for String Comparison",
            "headings": [
                "Set Collation",
                "Clear the Query",
                "To Learn More"
            ],
            "paragraphs": "Use the  Collation  query bar option\nto specify language-specific rules for string comparison, such as\nrules for lettercase and accent marks. In the Query Bar, click  Options . Enter the  locale  field in the collation document to specify the\n ICU Locale code  for the\ndesired language in the  Collation  field. As you type, the  Find  button is disabled and the\n Collation  label turns red until a valid query is entered. To use the  pinyin  variant of the Chinese collation, use the\nfollowing collation document: Click  Find  to run the query and view the updated\nresults. To clear the query bar and the results of the query, click\n Reset . See the supported languages and locales section in the\n MongoDB Manual . See the possible fields in a collation document in the\n MongoDB Manual .",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{ \"locale\" : \"zh@collation=pinyin\" }"
                }
            ],
            "preview": "Use the Collation query bar option\nto specify language-specific rules for string comparison, such as\nrules for lettercase and accent marks.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/limit",
            "title": "Limit the Number of Returned Documents",
            "headings": [
                "Set Documents to Return",
                "Clear the Query",
                "To Learn More",
                "How Does the Compass Query Compare to MongoDB and SQL Queries?"
            ],
            "paragraphs": "If the query bar has the  Limit  option, you can specify the\nmaximum number of documents to return. To specify the limit: In the Query Bar, click  Options . Enter an integer representing the number of documents to return into\nthe  Limit  field. Click  Find  to run the query and view the updated\nresults. To clear the query bar and the results of the query, click\n Reset . See the  limit  entry in the\n MongoDB Manual . $skip  corresponds to the  LIMIT ...  clause\nin a  SQL (Structured Query Language)   SELECT  statement. You have 3,235 articles. You would like to see a list of the\nfirst 10 articles.",
            "code": [
                {
                    "lang": "sql",
                    "value": "SELECT * FROM article\nLIMIT 10;"
                },
                {
                    "lang": "javascript",
                    "value": "db.article.aggregate(\n  { $limit : 10 }\n);"
                },
                {
                    "lang": "javascript",
                    "value": "$limit : 10"
                }
            ],
            "preview": "If the query bar has the Limit option, you can specify the\nmaximum number of documents to return.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/queries",
            "title": "Managing Saved Queries and Aggregations",
            "headings": [
                "Saving an Aggregation Pipeline",
                "Click the save dropdown button",
                "Enter a name for your pipeline",
                "Click Save",
                "Saving a Favorite Query",
                "Open query history",
                "Select favorites",
                "Name your query",
                "Viewing Saved Queries",
                "Using the My Queries View",
                "Using the Favorites Tab",
                "Open query history",
                "Select favorites",
                "Viewing Query History"
            ],
            "paragraphs": "Starting in  MongoDB Compass  1.31, you can load saved queries and aggregations from\nthe  My Queries  view once you are connected to your cluster.\nThis page explains how to add and view favorite queries and\naggregations. You can save a pipeline so that you can find it later. If you\nload a saved pipeline, you can change it without\nchanging the original saved copy. You can also create a  view  from your pipeline results. To save your pipeline: Click the  Save  dropdown button at the top of the pipeline\nbuilder. Click on  Save pipeline as... You can favorite a query so that you can find it later. If you\nload a favorite query, you can change it without\nchanging the original saved copy. To add a query to your favorites: ..step:: Click  Save . Click the  History  button at the top of the pipeline\nbuilder. Click the  Star  button. Enter a name for your query. Starting in  MongoDB Compass  1.31, you can view your saved queries\nand aggregation pipelines on the  My Queries  view\nonce connected to your cluster. When you click a saved or favorite query tile, Compass opens the\n Documents  tab with the filter loaded. When you click a saved or favorite pipeline tile, Compass opens the\n Aggregations  tab with the pipeline loaded. You can also view favorite queries from the  Favorites  tab\nfrom in the  Documents  view. To open the\n Favorites  tab: Click the  History  button at the top of the\n Documents  tab. Click the  Favorites  button in the past queries pane. For details on how to view query history see\n viewing recent query history .",
            "code": [],
            "preview": "Starting in MongoDB Compass 1.31, you can load saved queries and aggregations from\nthe My Queries view once you are connected to your cluster.\nThis page explains how to add and view favorite queries and\naggregations.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/recent",
            "title": "View Recent Queries",
            "headings": [],
            "paragraphs": "You can view up to 20 of the most recent queries for that collection.\nClick a query in the list to populate the query bar with that query. You can also hover over a query and perform the following actions: Click Action Save the query as a  favorite . Specify\na name for the query and click  Save . Copy the query to the clipboard. Remove the query from the  Recent  list. To learn how to write queries to filter your data, see\n Query Your Data .",
            "code": [],
            "preview": "You can view up to 20 of the most recent queries for that collection.\nClick a query in the list to populate the query bar with that query.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/maxtimems",
            "title": "Adjust Maximum Time for Query Operations",
            "headings": [
                "Set MAX TIME MS",
                "Learn More"
            ],
            "paragraphs": "The  MAX TIME MS  query bar option sets the cumulative time\nlimit in milliseconds to process query bar operations. If the time\nlimit is reached before the operation completes,  Compass \ninterrupts the operation. The default  MAX TIME MS  value is 60000, or 60 seconds.\nConsider raising this value if you have a very large collection, or\nyour operations are frequently timing out. You can also consider creating\n indexes  to improve query performance. Click  Options . Adjust  MAX TIME MS  to the desired value in milliseconds. To learn more about  MAX TIME MS , see\n cursor.maxTimeMS() \nin the MongoDB manual.",
            "code": [],
            "preview": "The MAX TIME MS query bar option sets the cumulative time\nlimit in milliseconds to process query bar operations. If the time\nlimit is reached before the operation completes, Compass\ninterrupts the operation.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/skip",
            "title": "Skip a Number of Documents",
            "headings": [
                "Set Documents to Skip",
                "Clear the Query",
                "To Learn More",
                "How Does the Compass Query Compare to MongoDB and SQL Queries?"
            ],
            "paragraphs": "If the query bar displays the  Skip  option, you can specify\nhow many documents to skip before returning the result set. To specify the number of documents to skip: In the Query Bar, click  Options . Enter an integer representing the number of documents to skip into\nthe  Skip  field. Click  Find  to run the query and view the updated\nresults. For query result sets larger than 1000 documents, Compass\nshows a sampling of the results.  Otherwise, Compass\nshows the entire result set. For details on sampling, see  Sampling . To clear the query bar and the results of the query, click\n Reset . See the  skip  entry in the\n MongoDB Manual . $skip  corresponds to the  LIMIT ... OFFSET ...  clause\nin a  SQL (Structured Query Language)   SELECT  statement. You have a 3,235 articles. You would like to see a list of articles\ngrouped in blocks of 50, starting with the 436th record.",
            "code": [
                {
                    "lang": "sql",
                    "value": "SELECT * FROM article\nLIMIT 50 OFFSET 435;"
                },
                {
                    "lang": "javascript",
                    "value": "db.article.aggregate(\n  { $limit : 50 },\n  { $skip : 435 }\n);"
                },
                {
                    "lang": "javascript",
                    "value": "$skip : 435"
                }
            ],
            "preview": "If the query bar displays the Skip option, you can specify\nhow many documents to skip before returning the result set.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/sort",
            "title": "Sort the Returned Documents",
            "headings": [
                "Compatibility",
                "Set the Sort Order",
                "Clear the Query",
                "To Learn More",
                "How Does the Compass Query Compare to MongoDB and SQL Queries?"
            ],
            "paragraphs": "If the query bar displays the  Sort  option, you can specify\nthe sort order of the returned documents. You can  sort the returned documents  for deployments hosted in the following\nenvironments: MongoDB Atlas : The fully\nmanaged service for MongoDB deployments in the cloud MongoDB Enterprise : The\nsubscription-based, self-managed version of MongoDB MongoDB Community : The\nsource available, free-to-use, and self-managed version of MongoDB To learn more about  sorting returned documents  for deployments hosted in MongoDB\nAtlas, see  Sort Query Results . To set the sort order: In the Query Bar, click  Options . Enter the  sort  document into the  Sort  field. As you type, the  Find  button is disabled and the\n Sort  label turns red until a valid query is entered. To specify ascending order for a field, set the field to  1  in\nthe sort document. To specify descending order for a field, set\nthe field and  -1  in the sort documents. The following  sort  document sorts results first by  year \nin descending order, and within each year, sort by  name  in\nascending order. Click  Find  to run the query and view the updated\nresults. To clear the query bar and the results of the query, click\n Reset . See the  sort  entry in the\n MongoDB Manual . $sort  corresponds to the  ORDER BY ...  clause\nin a  SQL (Structured Query Language)   SELECT  statement. You have 3,235 articles. You would like to see a list of articles\nsorted alphabetically by headline.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{ year: -1, name: 1 }"
                },
                {
                    "lang": "sql",
                    "value": "SELECT * FROM article\nORDER BY headline ASC;"
                },
                {
                    "lang": "javascript",
                    "value": "db.article.aggregate(\n  { $sort : { headline : 1 } }\n);"
                },
                {
                    "lang": "javascript",
                    "value": "$sort : { headline : 1 }"
                }
            ],
            "preview": "If the query bar displays the Sort option, you can specify\nthe sort order of the returned documents.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/project",
            "title": "Set Which Fields Are Returned",
            "headings": [
                "To Learn More",
                "How Does the Compass Query Compare to MongoDB and SQL Queries?"
            ],
            "paragraphs": "If the query bar displays the  Project  option, you can\nspecify which fields to return in the resulting data. By default, all\nfields are returned. To set a projection: In the Query Bar, click  Options . Enter the projection document into the  Project  field. As you type, the  Find  button is disabled and the\n Project  label turns red until a valid query is entered. Specify the field name and set to  1  in the project document. Only the fields specified in the project document are returned.\nThe  _id  field is returned unless it is set to   0  in the\n Project  document. Specify the field name and set to  0  in the project document. All fields except for the fields specified in the project\ndocument are returned. Click  Find  to run the query and view the updated\nresults. For query result sets larger than 1000 documents, Compass\nshows a sampling of the results.  Otherwise, Compass\nshows the entire result set. For details on sampling, see  Sampling . To learn how project works, see the  project  entry in the\n MongoDB Manual . $project  corresponds to choosing specific fields to return\nin a  SQL (Structured Query Language)   SELECT  statement. You have 3,235 articles. You would like to see only the headlines\nand authors of those articles.",
            "code": [
                {
                    "lang": "javascript",
                    "value": "{ year: 1, name: 1 }"
                },
                {
                    "lang": "javascript",
                    "value": "{ year: 0, name: 0 }"
                },
                {
                    "lang": "sql",
                    "value": "SELECT headline, author FROM article;"
                },
                {
                    "lang": "javascript",
                    "value": "db.article.aggregate(\n  { $project : { headline : 1, author : 1 } }\n);"
                },
                {
                    "lang": "javascript",
                    "value": "{ headline : 1, author : 1 }"
                }
            ],
            "preview": "If the query bar displays the Project option, you can\nspecify which fields to return in the resulting data. By default, all\nfields are returned.",
            "tags": null,
            "facets": null
        },
        {
            "slug": "query/filter",
            "title": "Query Your Data",
            "headings": [
                "Compatibility",
                "Set Query Filter",
                "Supported Data Types in the Query Bar",
                "Clear the Query",
                "How Does the Compass Query Compare to MongoDB and SQL Queries?",
                "Examples"
            ],
            "paragraphs": "You can type MongoDB filter documents into the query bar to display only\ndocuments which match the specified criteria. To learn more about\nquerying documents, see  Query Documents  in the MongoDB manual. You can  query your data  for deployments hosted in the following\nenvironments: MongoDB Atlas : The fully\nmanaged service for MongoDB deployments in the cloud MongoDB Enterprise : The\nsubscription-based, self-managed version of MongoDB MongoDB Community : The\nsource available, free-to-use, and self-managed version of MongoDB To learn more about  querying your data  for deployments hosted in MongoDB\nAtlas, see  Find Specific Documents . In the  Filter  field, enter a filter document. You can use\nall of the MongoDB  query operators  except the  $text  and\n $expr  operators. The following filter only returns documents which have a  title \nvalue of  Jurassic Park : Click  Find  to run the query and view the updated\nresults. For query result sets larger than 1000 documents, Compass\nshows a sampling of the results.  Otherwise, Compass\nshows the entire result set. For details on sampling, see  Sampling . The Compass  Filter  supports using the\n mongo  shell mode representation of the MongoDB\nExtended JSON  BSON data types . The following filter returns documents where\n start_date  is greater than than the BSON  Date \n 2017-05-01 : By specifying the  Date  type in both  start_date  and the\n $gt  comparison operator, Compass performs the  greater\nthan  comparison chronologically, returning documents with\n start_date  later than  2017-05-01 . Without the  Date  type specification, Compass compares the\n start_dates  as strings\n lexicographically ,\ninstead of comparing the values chronologically. To clear the query bar and the results of the query, click\n Reset . $filter  corresponds to the  WHERE  clause in a\n SQL (Structured Query Language)   SELECT  statement. You have 3,235 articles. You would like to see all articles\nthat Joe Bloggs wrote. For more query examples, see\n Query Documents \nin the MongoDB manual. The following examples use the JSON documents below as sample data.\nTo import this sample data to your MongoDB deployment with  MongoDB Compass : Copy the array of documents below by clicking  Copy . In  Compass , use the left navigation panel to select the\ndatabase and the collection you want to import the data to. Click the  Documents  tab. Click  Add Data  and select  Insert Document . Ensure that  View  is set to JSON, or  {} , and paste\nthe copied JSON documents in the field. Click  Insert . If you do not have a MonogDB deployment or if you would like to\nquery a large sample data set, see\n Sample Data for Atlas Clusters  for\ninstructions on creating a free-tier cluster with sample data. Note\nthat the examples below are intended to filter the sample JSON\ndocuments provided on this page and may not properly filter another\nsample data set. The following  query filter  finds\nall documents where the value of  name  is \"Andrea Le\". The query returns the following document because the  name \nfield value is an exact match. The following  query filter  uses the\n $not operator  to find\nall documents where: The query returns the following documents because the  name \nfield either does not exist or its value is something other than\n\"Andrea Le\". The value of the  name  field is  not  equal to \"Andrea Le\",\nor The  name  field does not exist For a complete list of logical query operators, see\n Logical Query Operators . The following  query filter  uses the\n $lte operator  to\nfind all documents where  version  is less than or equal\nto  4 . The query returns the following documents because\nthe  version  field values are less than or equal to  4 . For a complete list of comparison operators, see\n Comparison Query Operators . The following  query filter  uses the\n $gt operator  and\n Date() method  to find all\ndocuments where the  dateCreated  field value is later than\nJune 22nd, 2000. The query returns the following documents because\nthe  dateCreated  field values are after June 22, 2000. The following  query filter  uses the\n $elemMatch operator  to find all documents where at least one value in\nthe  scores  array is greater than 80 and less than  90 The query returns the following document because one of the\nvalues in the scores array is  85 , which matches the\n $elemMatch  criteria. The following  query filter  finds\nall documents where the UUID is\n\"002636e1-10cd-4c8b-a9a7-01b7bfd3899c\". The query returns the following document because the  UUID \nis an exact match.",
            "code": [
                {
                    "lang": "json",
                    "value": "{ \"title\": \"Jurassic Park\" }"
                },
                {
                    "lang": "javascript",
                    "value": "{ \"start_date\": {$gt: new Date('2017-05-01')} }"
                },
                {
                    "lang": "javascript",
                    "value": "{ author : { $eq : \"Joe Bloggs\" } }"
                },
                {
                    "lang": "javascript",
                    "value": "db.article.aggregate(\n  { $filter : { author : { $eq : \"Joe Bloggs\" } } }\n);"
                },
                {
                    "lang": "sql",
                    "value": "SELECT * FROM article\nWHERE author = \"Joe Bloggs\";"
                },
                {
                    "lang": "JSON",
                    "value": "[\n   {\n      \"name\":\"Andrea Le\",\n      \"email\":\"andrea_le@fakegmail.com\",\n      \"version\":5,\n      \"scores\":[85, 95, 75],\n      \"dateCreated\":{\"$date\":\"2003-03-26\"}\n   },\n   {\n      \"email\":\"no_name@fakegmail.com\",\n      \"version\":4,\n      \"scores\":[90, 90, 70],\n      \"dateCreated\":{\"$date\":\"2001-04-15\"}\n   },\n   {\n      \"name\":\"Greg Powell\",\n      \"email\":\"greg_powell@fakegmail.com\",\n      \"version\":1,\n      \"scores\":[65, 75, 80],\n      \"dateCreated\":{\"$date\":\"1999-02-10\"}\n   }\n]"
                },
                {
                    "lang": "shell",
                    "value": "{ name: \"Andrea Le\" }"
                },
                {
                    "lang": "JSON",
                    "value": "{\n   \"_id\": {\"$oid\": \"5e349915cebae490877d561d\"},\n   \"name\":\"Andrea Le\",\n   \"email\":\"andrea_le@fakegmail.com\",\n   \"version\":5,\n   \"scores\":[85, 95, 75],\n   \"dateCreated\":{\"$date\":\"2003-03-26\"}\n}"
                },
                {
                    "lang": "shell",
                    "value": "{ name: { $not: { $eq: \"Andrea Le\" } } }"
                },
                {
                    "lang": "JSON",
                    "value": "[\n   {\n      \"_id\":{\"$oid\":\"5e349915cebae490877d561e\"},\n      \"email\":\"no_name@fakegmail.com\",\n      \"version\":4,\n      \"scores\":[90, 90, 75],\n      \"dateCreated\":{\"$date\":\"2001-04-15\"}\n   },\n   {\n      \"_id\":{\"$oid\":\"5a9427648b0beebeb69579cf\"},\n      \"name\":\"Greg Powell\",\n      \"email\":\"greg_powell@fakegmail.com\",\n      \"version\":1,\n      \"scores\":[65, 75, 80],\n      \"dateCreated\":{\"$date\":\"1999-02-10\"}\n   }\n]"
                },
                {
                    "lang": "shell",
                    "value": "{ version: { $lte: 4 } }"
                },
                {
                    "lang": "JSON",
                    "value": "[\n   {\n      \"_id\":{\"$oid\":\"5e349915cebae490877d561e\"},\n      \"email\":\"no_name@fakegmail.com\",\n      \"version\":4,\n      \"scores\":[90, 90, 75],\n      \"dateCreated\":{\"$date\":\"2001-04-15\"}\n   },\n   {\n      \"_id\":{\"$oid\":\"5a9427648b0beebeb69579cf\"},\n      \"name\":\"Greg Powell\",\n      \"email\":\"greg_powell@fakegmail.com\",\n      \"version\":1,\n      \"scores\":[65, 75, 80],\n      \"dateCreated\":{\"$date\":\"1999-02-10\"}\n   }\n]"
                },
                {
                    "lang": "shell",
                    "value": "{ dateCreated: { $gt: Date('2000-06-22') } }"
                },
                {
                    "lang": "JSON",
                    "value": "[\n   {\n      \"_id\": {\"$oid\": \"5e349915cebae490877d561d\"},\n      \"name\":\"Andrea Le\",\n      \"email\":\"andrea_le@fakegmail.com\",\n      \"version\":5,\n      \"scores\":[85, 95, 75],\n      \"dateCreated\":{\"$date\":\"2003-03-26\"}\n   },\n   {\n      \"_id\":{\"$oid\":\"5e349915cebae490877d561e\"},\n      \"email\":\"no_name@fakegmail.com\",\n      \"version\":4,\n      \"scores\":[90, 90, 75],\n      \"dateCreated\":{\"$date\":\"2001-04-15\"}\n   }\n]"
                },
                {
                    "lang": "shell",
                    "value": "{ scores: { $elemMatch: { $gt: 80, $lt: 90 } } }"
                },
                {
                    "lang": "JSON",
                    "value": "{\n   \"_id\": {\"$oid\": \"5e349915cebae490877d561d\"},\n   \"name\":\"Andrea Le\",\n   \"email\":\"andrea_le@fakegmail.com\",\n   \"version\":5,\n   \"scores\":[85, 95, 75],\n   \"dateCreated\":{\"$date\":\"2003-03-26\"}\n}"
                },
                {
                    "lang": "shell",
                    "value": "{_id: UUID('002636e1-10cd-4c8b-a9a7-01b7bfd3899c')}"
                },
                {
                    "lang": "JSON",
                    "value": "{\n   \"_id\": UUID('002636e1-10cd-4c8b-a9a7-01b7bfd3899c'),\n   \"name\":\"Mr. Florencio Breitenberg\",\n   \"email\":\"Florencio.Breitenberg\",\n   \"phone\":\"876.349.6791 x616\"\n   \"website\":\"nelle.name\",\n   \"country\": \"Zimbabwe\",\n   \"age\":31\n}"
                }
            ],
            "preview": "You can type MongoDB filter documents into the query bar to display only\ndocuments which match the specified criteria. To learn more about\nquerying documents, see Query Documents in the MongoDB manual.",
            "tags": null,
            "facets": null
        }
    ]
}